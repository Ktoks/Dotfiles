#!/usr/bin/env bash

rgf() {
    mapfile -t files < <(fd "$2")
    rg "$1" "${files[@]}" "${@:3}"
}


rnr() {
    OPTIND=1
    command -v fd >/dev/null 2>&1 || { echo "Error: 'fd' is required but not installed." >&2; return 1; }

    show_help() {
        echo -e "USAGE:"
        echo -e "  rnr \e[0m[-{b|c|d #|f|h|n|r}] \e[31m<SUBSTRING TO REPLACE> \e[32m<REPLACEMENT STRING> \e[0m<RENAME FILE(s)>"
        echo ""
        echo -e "OPTIONS:"
        echo -e "  -b, --backup:            (non-interactive)     Change and backup overwrites"
        echo -e "  -c, --change:            (interactive)         Make change"
        echo -e "  -f, --force:             (non-interactive)     Change and force overwrites"
        echo -e "  -n, --nooverwrite:       (non-interactive)     Change but don't overwrite"
        echo -e "  -r, --recurse:           (modifier)            Change recursively"
        echo -e "  -d, --depth #:           (modifier req. opt)   Default:1 requires a numeric value"
        echo -e "  -h, --help:                                    Display this message"
        echo ""
        echo -e "POSITIONAL ARGUMENTS:"
        echo -e "\e[31m  <SUBSTRING TO REPLACE>    \e[0mA subset of <RENAME FILE(s)>."
        echo -e "  \e[32m<REPLACEMENT STRING>      \e[0mString to replace <SUBSTRING TO REPLACE> in <RENAME FILE(s)>."
        echo -e "  <RENAME FILE(s)>          \e[0mFile(s) to rename."
        echo ""
        echo "EXAMPLES:"
        echo -e "  Peek changes:  rnr \e[31mfoo \e[32mbar \e[0mfilename(s)\e[31mfoo     \e[0m-> echo \e[0mfilename\e[31mfoo \e[0mfilename\e[32mbar\e[0m"
        echo -e "  Make changes:  rnr -c \e[31mfoo \e[32mbar \e[0mfilename(s)\e[31mfoo  \e[0m-> mv \e[0mfilename\e[31mfoo \e[0mfilename\e[32mbar\e[0m"
        echo -e "  Recursively:   rnr -rd 2 \e[31mfoo \e[32mbar \e[0msomedir(s)   \e[0m-> mv \e[0msome(s)/file\e[31mfoo \e[0msome(s)/file\e[32mbar\e[0m"
        echo ""
    }


    local temp
    if ! temp=$(getopt -o "bcfhnrd:" --long "backup,change,depth,force,nooverwrite,recurse,help" -- "$@"); then
        echo "Terminating..." >&2 && exit 1
    fi
    eval set -- "$temp"
    movesetting=0;
    recurse=0;
    depth="1";
    while true; do
        case "$1" in
            -b | --backup ) movesetting=1; shift ;;
            -c | --change ) movesetting=2; shift ;;
            -f | --force ) movesetting=3; shift ;;
            -n | --nooverwrite ) movesetting=4; shift ;;
            -r | --recurse ) recurse=1; shift;;
            -d | --depth )
            [[ $recurse = 0 ]] \
                && echo "Error: Option -r required for option -d." >&2 && exit
            shift;
            [[ -z "$1" ]] \
                && echo "Error: Option -d requires a numeric argument." >&2 && exit

            depth="$1"; shift ;;
            -h | --help ) show_help; exit;;
            -- ) shift; break ;;
            *) break ;;
        esac
    done

    local from="$1"
    local to="$2"
    local found=0

    [ -z "$from" ] && show_help && exit
    [ -z "$to" ] && show_help && exit

    if [ $recurse = 1 ]; then

        /usr/bin/env fd -H "$from" -d "$depth" "${@:3}" | while IFS= read -r i; do
                local renamed=${i//$from/$to}
                [ "$i" = "$renamed" ] && continue
                echo -e "\e[31m${i}\e[0m -> \e[32m${renamed}\e[0m"
                case $movesetting in
                    1) mv -b "$i" "$renamed" ;;
                    2) mv -i "$i" "$renamed" ;;
                    3) mv -f "$i" "$renamed" ;;
                    4) mv -n "$i" "$renamed" ;;
                esac
                found=1
        done
    else
        for i in "${@:3}"; do
            if [[ "$i" =~ $from ]]; then

                local renamed=${i//$from/$to}

                echo -e "\e[31m${i}\e[0m -> \e[32m${renamed}\e[0m"
                case $movesetting in
                    1) mv -b "$i" "$renamed" ;;
                    2) mv -i "$i" "$renamed" ;;
                    3) mv -f "$i" "$renamed" ;;
                    4) mv -n "$i" "$renamed" ;;
                esac
                found=1
            fi
        done
    fi
    echo
    [ $found -ne 1 ] && echo -e "\e[31mNo matches found"
}
