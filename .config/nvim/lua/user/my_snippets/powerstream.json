{
"xml-snippet": {
  "prefix": "afpcat01",
  "body": [
    "<module",
    "\tname=\"${1:concatenate_afps}\"",
    "\tmodname=\"${2:afpcat01}\"",
    "\tcatinp=\"${3:\\$pre.input*}\"",
    "\tcatout=\"${4:\\$pre.catout.afp}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "mask example\n\nConcatenate AFP files"
},

"afpcat01_1": {
  "prefix": "afpcat01",
  "body": [
    "<module",
    "\tname=\"${1:concatenate_afps}\"",
    "\tmodname=\"${2:afpcat01}\"",
    "\tcatinp=\"${3:\\$pre.input.lst}\"",
    "\tcatout=\"${4:\\$pre.catout.afp}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "list example\n\nConcatenate AFP files"
},

"asc2bin_or_bin2asc_conversion_0": {
  "prefix": "asc2bin_or_bin2asc_conversion",
  "body": [
    "<module",
    "\tname=\"${1:conversion}\"",
    "\tmodname=\"${2:asc2bin_or_bin2asc_conversion}\"",
    "\tconversion_input=\"${3:\\$pre.extract\\$post}\"",
    "\tconversion=\"${4:AtoB}\"",
    "\tin_pos=\"${5:2202}\"",
    "\tin_len=\"${6:1}\"",
    "\tout_pos=\"${7:2501}\"",
    "/>",
    "$0"
  ],
  "description": "asc2bin_or_bin2asc_conversion\n\nSimple ascii to binary or binary to ascii conversion"
},

"cflhandshake01_0": {
  "prefix": "cflhandshake01",
  "body": [
    "<process",
    "\tname=\"${1:cfl_handshake_wait}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${3:cfl_handshake}\"",
    "\t\tmodname=\"${4:cflhandshake01}\"",
    "\t\tcfldir=\"${5:/bcs/\\$psite\\$lvl/input/}\"",
    "\t\tcfllist=\"${6:\\${runpath\\}*.cflhandshakelist.txt}\"",
    "\t\tcflmax=\"${7:7200}\"",
    "\t\tcflfound=\"${8:900}\"",
    "\t/>",
    "\t<if",
    "\t\tname=\"${9:if_handshake_not_found}\"",
    "\t\tdisable=\"${10:n}\"",
    "\t>",
    "\t\t<condition",
    "\t\t\tname=\"${11:condition}\"",
    "\t\t\tdisable=\"${12:n}\"",
    "\t\t>",
    "\t\t\t<![CDATA[ (\\$cflrc eq \"1\") ]]>",
    "\t\t\t<module",
    "\t\t\t\tname=\"${13:email}\"",
    "\t\t\t\tmodname=\"${14:geneml01}\"",
    "\t\t\t\temlto=\"${15:richard.sprague\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\t\temlcc=\"${16:cammy.telford\\\\\\\\\\\\@rrd.com,rod.stuart\\\\\\\\\\\\@rrd.com,john.merriam\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\t\temlfr=\"${17:brandon.nielsen\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\t\temlsub=\"${18:\\$PI Order: \\$n CFL handshake files not found}\"",
    "\t\t\t\temlbody=\"${19:See attached report}\"",
    "\t\t\t\temlatt=\"${20:\\$cflhandshakenotfound}\"",
    "\t\t\t\tdisable=\"${21:n}\"",
    "\t\t\t/>",
    "\t\t</condition>",
    "\t</if>",
    "\t<if",
    "\t\tname=\"${22:if_handshake_load_error}\"",
    "\t\tdisable=\"${23:n}\"",
    "\t>",
    "\t\t<condition",
    "\t\t\tname=\"${24:condition}\"",
    "\t\t\tdisable=\"${25:n}\"",
    "\t\t>",
    "\t\t\t<![CDATA[ (\\$cflrc eq \"2\") ]]>",
    "\t\t\t<module",
    "\t\t\t\tname=\"${26:email}\"",
    "\t\t\t\tmodname=\"${27:geneml01}\"",
    "\t\t\t\temlto=\"${28:richard.sprague\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\t\temlcc=\"${29:cammy.telford\\\\\\\\\\\\@rrd.com,rod.stuart\\\\\\\\\\\\@rrd.com,john.merriam\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\t\temlsub=\"${30:\\$PI Order: \\$n CFL handshake files not successful}\"",
    "\t\t\t\temlbody=\"${31:See attached report}\"",
    "\t\t\t\temlatt=\"${32:\\$cflhandshakenotsuccessful}\"",
    "\t\t\t\tdisable=\"${33:n}\"",
    "\t\t\t/>",
    "\t\t</condition>",
    "\t</if>",
    "</process>",
    "$0"
  ],
  "description": "cflhandshake01\n\nChecks the return codes in the return handshake files"
},

"blaze_ingestion_0": {
  "prefix": "blaze_ingestion",
  "body": [
    "<module",
    "\tname=\"${1:blaze_ingestion\\${post\\}}\"",
    "\tmodname=\"${2:blaze_ingestion}\"",
    "\tdisable=\"${3:n}\"",
    "\tinzip=\"${4:\\${infile\\}}\"",
    "/>",
    "$0"
  ],
  "description": "blaze_ingestion\n\nIngest a blaze zip file"
},

"eps_replace01_0": {
  "prefix": "eps_replace01",
  "body": [
    "<module",
    "\tname=\"${1:burst_bulk}\"",
    "\tmodname=\"${2:eps_replace01}\"",
    "\teps_cd=\"${3:\\${runpath\\}eps_index.txt}\"",
    "\teps_cd_out=\"${4:\\${runpath\\}eps_index_out.txt}\"",
    "\teps_type=\"${5:burst}\"",
    "\teps_zip=\"${6:\\${runpath\\}zipname.zip}\"",
    "\teps_compress=\"${7:pso}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "example using a burst\n\nReplacement process for obsolete EPS process. Bursting or Bookmarking Bulk PDF's for clients"
},

"eps_replace01_1": {
  "prefix": "eps_replace01",
  "body": [
    "<module",
    "\tname=\"${1:burst_bulk}\"",
    "\tmodname=\"${2:eps_replace01}\"",
    "\teps_cd=\"${3:\\${runpath\\}eps_index.txt}\"",
    "\teps_cd_out=\"${4:\\${runpath\\}eps_index_out.txt}\"",
    "\teps_type=\"${5:mark}\"",
    "\teps_compress=\"${6:pso}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "example using a mark\n\nReplacement process for obsolete EPS process. Bursting or Bookmarking Bulk PDF's for clients"
},

"eps_validate01_0": {
  "prefix": "eps_validate01",
  "body": [
    "<module",
    "\tname=\"${1:burst_bulk}\"",
    "\tmodname=\"${2:eps_validate01}\"",
    "\teps_zip=\"${3:\\${runpath\\}eps.zip}\"",
    "\teps_validate_begin=\"${4:20}\"",
    "\teps_validate_length=\"${5:10}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "example using a burst\n\nValidate integrity of EPS zip file"
},

"duplicate_file_check_0": {
  "prefix": "duplicate_file_check",
  "body": [
    "<module",
    "\tmodname=\"${1:duplicate_file_check}\"",
    "\tname=\"${2:duplicate_file_check\\${post\\}}\"",
    "\tdisable=\"${3:n}\"",
    "\tfile_in=\"${4:\\$infile}\"",
    "\tduplicate_file_list=\"${5:\\${pre\\}.duplicate_file_list\\${post\\}.txt}\"",
    "/>",
    "$0"
  ],
  "description": "single input file to be checked\n\nReplacement for gendup01. For the upcoming Active/Active? environment a centralized database solution is needed over a file containing the duplicate info"
},

"duplicate_file_check_1": {
  "prefix": "duplicate_file_check",
  "body": [
    "<module",
    "\tmodname=\"${1:duplicate_file_check}\"",
    "\tname=\"${2:duplicate_file_check\\${loop_counter2\\}}\"",
    "\tdisable=\"${3:n}\"",
    "\tmask_in=\"${4:\\${usrinputs\\}input_pdf*.pdf}\"",
    "\tduplicate_file_list=\"${5:\\${pre\\}.duplicate_file_list\\${post\\}.txt}\"",
    "/>",
    "$0"
  ],
  "description": "multiple files with a filemask to be checked\n\nReplacement for gendup01. For the upcoming Active/Active? environment a centralized database solution is needed over a file containing the duplicate info"
},

"duplicate_file_check_2": {
  "prefix": "duplicate_file_check",
  "body": [
    "<!-- Check to see if any duplicates were found. -->",
    "<module",
    "\tmodname=\"${1:genemp01}\"",
    "\tname=\"${2:dup_file_genemp\\${post\\}}\"",
    "\tdisable=\"${3:n}\"",
    "\tempinp=\"${4:\\${pre\\}.duplicate_file_list\\${post\\}.txt}\"",
    "/>",
    "<!-- If there were any duplicate files send email and abort. -->",
    "<if",
    "\tname=\"${5:If_Duplicate_File_Check\\${post\\}}\"",
    ">",
    "\t<condition",
    "\t\tname=\"${6:Condition_Dup_File_Check\\${post\\}}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$emprc == 0)]]>",
    "\t\t<module",
    "\t\t\tmodname=\"${7:geneml01}\"",
    "\t\t\tname=\"${8:email_dup_found\\${post\\}}\"",
    "\t\t\tdisable=\"${9:n}\"",
    "\t\t\temlto=\"${10:john.doe\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlfr=\"${11:john.doe\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlsub=\"${12:\\${PI\\}\\${PJT\\} Duplicate File Found!}\"",
    "\t\t\temlbatt=\"${13:\\${pre\\}.duplicate_file_list\\${post\\}.txt}\"",
    "\t\t/>",
    "\t\t<module",
    "\t\t\tmodname=\"${14:gendie01}\"",
    "\t\t\tname=\"${15:Duplicate_Death\\${post\\}}\"",
    "\t\t\tdisable=\"${16:\\${dup_rerun\\}}\"",
    "\t\t\tdierc=\"${17:12}\"",
    "\t\t\tdiemsg=\"${18:Dupicate File Found!}\"",
    "\t\t/>",
    "\t</condition>",
    "</if>",
    "$0"
  ],
  "description": "Abort and send an email if duplicates are found.\n\nReplacement for gendup01. For the upcoming Active/Active? environment a centralized database solution is needed over a file containing the duplicate info"
},

"duplicate_file_check_3": {
  "prefix": "duplicate_file_check",
  "body": [
    "<!-- Check to see if any duplicates were found. -->",
    "<module",
    "\tmodname=\"${1:genemp01}\"",
    "\tname=\"${2:dup_file_genemp\\${post\\}}\"",
    "\tdisable=\"${3:n}\"",
    "\tempinp=\"${4:\\${pre\\}.duplicate_file_list\\${post\\}.txt}\"",
    "/>",
    "<!-- If there were any duplicate files send email and move files out of the way. -->",
    "<if",
    "\tname=\"${5:If_Duplicate_File_Check\\${post\\}}\"",
    ">",
    "\t<condition",
    "\t\tname=\"${6:Condition_Dup_File_Check\\${post\\}}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$emprc == 0)]]>",
    "\t\t<module",
    "\t\t\tmodname=\"${7:geneml01}\"",
    "\t\t\tname=\"${8:email_dup_found\\${post\\}}\"",
    "\t\t\tdisable=\"${9:n}\"",
    "\t\t\temlto=\"${10:john.doe\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlfr=\"${11:john.doe\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlsub=\"${12:\\${PI\\}\\${PJT\\} Duplicate Files Found and moved to not be processed!}\"",
    "\t\t\temlbatt=\"${13:\\${pre\\}.duplicate_file_list\\${post\\}.txt}\"",
    "\t\t/>",
    "\t\t<!-- Make duplicates dir to move duplicate files to. -->",
    "\t\t<system",
    "\t\t\tname=\"${14:mkdir_duplicates\\${post\\}}\"",
    "\t\t\tdisable=\"${15:n}\"",
    "\t\t\tcommand=\"${16:mkdir \\${runpath\\}duplicates/}\"",
    "\t\t/>",
    "\t\t<!-- Loop through duplicate_file_list and move duplicate files. -->",
    "\t\t<loop",
    "\t\t\tname=\"${17:loop_move_dup_files\\${post\\}}\"",
    "\t\t\tdisable=\"${18:\\${dup_rerun\\}}\"",
    "\t\t\tloop_data_file=\"${19:\\${pre\\}.duplicate_file_list\\${post\\}.txt}\"",
    "\t\t>",
    "\t\t\t<module",
    "\t\t\t\tmodname=\"${20:genmov01}\"",
    "\t\t\t\tname=\"${21:move_dup_file\\${loop_counter2\\}}\"",
    "\t\t\t\tdisable=\"${22:n}\"",
    "\t\t\t\tmovinp=\"${23:\\${loop_curline\\}}\"",
    "\t\t\t\tmovout=\"${24:\\${runpath\\}duplicates/}\"",
    "\t\t\t/>",
    "\t\t</loop>",
    "\t</condition>",
    "</if>",
    "$0"
  ],
  "description": "Move duplicate files out of the way as to not process them, but process non duplicate files\n\nReplacement for gendup01. For the upcoming Active/Active? environment a centralized database solution is needed over a file containing the duplicate info"
},

"duplicate_order_check_0": {
  "prefix": "duplicate_order_check",
  "body": [
    "<process",
    "\tname=\"${1:full_process}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<!-- Duplicate order check process -->",
    "\t<subprocess",
    "\t\tname=\"${3:duplicate_order_check_process\\${post\\}}\"",
    "\t\tprocessname=\"${4:duplicate_order_check_process}\"",
    "\t\tdisable=\"${5:n}\"",
    "\t/>",
    "</process>",
    "$0"
  ],
  "description": "The default module call will work for most cases. If you need to override one of the attributes just include the attribute needed with its overridden value. Usually this check will be the first thing in the full process. It could be located elsewhere depending upon your workflow.\n\nCheck if an order number has been used previously. This is to help prevent duplicate order issues with pivot tracking and other order specific issues"
},

"duplicate_order_check_1": {
  "prefix": "duplicate_order_check",
  "body": [
    "<process",
    "\tname=\"${1:duplicate_order_check_process}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<!-- Duplicate order check module. -->",
    "\t<module",
    "\t\tname=\"${3:duplicate_order_check\\${post\\}}\"",
    "\t\tmodname=\"${4:duplicate_order_check}\"",
    "\t\tdisable=\"${5:n}\"",
    "\t/>",
    "\t<!-- Check if it was a duplicate. -->",
    "\t<if",
    "\t\tname=\"${6:if_duplicate_order_check\\${post\\}}\"",
    "\t>",
    "\t\t<condition",
    "\t\t\tname=\"${7:condition_dup_file_check\\${post\\}}\"",
    "\t\t>",
    "\t\t\t<![CDATA[ (\\$order_check->{is_duplicate\\})]]>",
    "\t\t\t<!-- Create body of email report. -->",
    "\t\t\t<command",
    "\t\t\t\tname=\"${8:create_dup_order_email_report}\"",
    "\t\t\t\tdisable=\"${9:n}\"",
    "\t\t\t>",
    "\t\t\t\t<![CDATA[\n\t\t\t\t\tmy @dup_order;\n\t\t\t\t\t# Create each line you want in the email.\n\t\t\t\t\tpush(@dup_order, \"Duplicate order check results:\");\n\t\t\t\t\t# Loop through order_check object and add to report.\n\t\t\t\t\tforeach \\$oc_key (keys %{\\$order_check\\}) {\n\t\t\t\t\t  push(@dup_order, \"\\${oc_key\\}: \\$order_check->{\\$oc_key\\}\");\n\t\t\t\t\t\\}\n\t\t\t\t\t# Create body email var\n\t\t\t\t\t\\$dup_order_email_body = join('\\\\n', sort(@dup_order));\n\t\t\t\t]]>",
    "\t\t\t</command>",
    "\t\t\t<!-- Send email about duplicate order. -->",
    "\t\t\t<module",
    "\t\t\t\tmodname=\"${10:geneml01}\"",
    "\t\t\t\tname=\"${11:email_duplicate_order}\"",
    "\t\t\t\tdisable=\"${12:n}\"",
    "\t\t\t\temlto=\"${13:John.Doe\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\t\temlfr=\"${14:Jane.Doe\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\t\temlsub=\"${15:\\${PI\\}\\${PJT\\} Duplicate Order Found! \\$order_check->{sales_code\\}-\\$order_check->{order_number\\}-\\$order_check->{four_year_loc\\}}\"",
    "\t\t\t\temlbody=\"${16:\\$dup_order_email_body}\"",
    "\t\t\t/>",
    "\t\t\t<!-- Kill process after email has been sent. -->",
    "\t\t\t<module",
    "\t\t\t\tname=\"${17:duplicate_order_death}\"",
    "\t\t\t\tmodname=\"${18:gendie01}\"",
    "\t\t\t\tdisable=\"${19:\\${dup_rerun\\}}\"",
    "\t\t\t\tdierc=\"${20:12}\"",
    "\t\t\t\tdiemsg=\"${21:All your order are belong to us!}\"",
    "\t\t\t/>",
    "\t\t</condition>",
    "\t</if>",
    "</process>",
    "$0"
  ],
  "description": "The module call and duplicate handling process contained in a single process.\n\nCheck if an order number has been used previously. This is to help prevent duplicate order issues with pivot tracking and other order specific issues"
},

"duplicate_record_check_0": {
  "prefix": "duplicate_record_check",
  "body": [
    "<!-- Call duplicate record check module on extract.-->",
    "<module",
    "\tmodname=\"${1:duplicate_record_check}\"",
    "\tname=\"${2:duplicate_record_check\\${post\\}}\"",
    "\tdisable=\"${3:n}\"",
    "\tinput_extract=\"${4:\\${pre\\}.extrac01}\"",
    "\tduplicate_file_list=\"${5:\\${pre\\}.duplicate_record_list\\${post\\}.txt}\"",
    "/>",
    "$0"
  ],
  "description": "Example of a single input file to be checked.\n\nThe module will create a duplicate record list that you must use to handle any duplicates. This allows for you to send an email and terminate execution if a duplicate is detected. You could also then handled any rerun process by setting a flag to not terminate in a rerun scenario, but you would still get the duplicate email and report"
},

"duplicate_record_check_1": {
  "prefix": "duplicate_record_check",
  "body": [
    "<!-- Check to see if any duplicates were found. -->",
    "<module",
    "\tmodname=\"${1:genemp01}\"",
    "\tname=\"${2:dup_file_genemp\\${post\\}}\"",
    "\tdisable=\"${3:n}\"",
    "\tempinp=\"${4:\\${pre\\}.duplicate_record_list\\${post\\}.txt}\"",
    "/>",
    "<!-- If there were any duplicate records send email and abort. -->",
    "<if",
    "\tname=\"${5:If_Duplicate_Record_Check\\${post\\}}\"",
    ">",
    "\t<condition",
    "\t\tname=\"${6:Condition_Dup_Record_Check\\${post\\}}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$emprc == 0)]]>",
    "\t\t<module",
    "\t\t\tmodname=\"${7:geneml01}\"",
    "\t\t\tname=\"${8:email_dup_record_found\\${post\\}}\"",
    "\t\t\tdisable=\"${9:n}\"",
    "\t\t\temlto=\"${10:john.doe\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlfr=\"${11:john.doe\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlsub=\"${12:\\${PI\\}\\${PJT\\} Duplicate Record(s) Found!}\"",
    "\t\t\temlbatt=\"${13:\\${pre\\}.duplicate_record_list\\${post\\}.txt}\"",
    "\t\t/>",
    "\t\t<module",
    "\t\t\tname=\"${14:Duplicate_Record_Abort}\"",
    "\t\t\tmodname=\"${15:gendie01}\"",
    "\t\t\tdisable=\"${16:\\${dup_rerun\\}}\"",
    "\t\t\tdierc=\"${17:12}\"",
    "\t\t\tdiemsg=\"${18:Duplicate Records Found. Aborting...}\"",
    "\t\t/>",
    "\t</condition>",
    "</if>",
    "$0"
  ],
  "description": "Send an email and abort if duplicates are found.\n\nThe module will create a duplicate record list that you must use to handle any duplicates. This allows for you to send an email and terminate execution if a duplicate is detected. You could also then handled any rerun process by setting a flag to not terminate in a rerun scenario, but you would still get the duplicate email and report"
},

"duplicate_record_suppressor_0": {
  "prefix": "duplicate_record_suppressor",
  "body": [
    "<module",
    "\tname=\"${1:duplicate_record_suppressor\\${post\\}}\"",
    "\tmodname=\"${2:duplicate_record_suppressor}\"",
    "\tinext=\"${3:\\${pre\\}repext\\${post\\}}\"",
    "\tkeep_for_days=\"${4:90}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "Uses default key position. Keeps records for 90 days\n\nSplits extract into a deliver and suppress"
},

"eps_addr_0": {
  "prefix": "eps_addr",
  "body": [
    "<module",
    "\tmodname=\"${1:eps_addr}\"",
    "\tname=\"${2:EPS Address}\"",
    "\tepsmaster=\"${3:This is the main title}\"",
    "\tepsele=\"${4:epsaddr1}\"",
    "\tepsinp=\"${5:LGNP.ttt.abc1234.abcd.INPUT99.VRMV.*123456.TXT}\"",
    "/>",
    "<module",
    "\tmodname=\"${6:genxmt01}\"",
    "\tname=\"${7:transmit_eps_address}\"",
    "\txmtinp=\"${8:\\$pre.epsout\\$post}\"",
    "\txmtcfg=\"${9:eps}\"",
    "\txmtarc=\"${10:n}\"",
    "\txmtopt=\"${11:text no}\"",
    "\txmtout=\"${12:Verimove\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\LGNP.ttt.abc1234.abcd.INPUT99.VRMV.A123456_VRMV.TXT}\"",
    "/>",
    "$0"
  ],
  "description": "eps_addr\n\nCreate address file for EPS"
},

"endicia_labels_0": {
  "prefix": "endicia_labels",
  "body": [
    "<module",
    "\tname=\"${1:repext_to_endicia_labels}\"",
    "\tmodname=\"${2:endicia_labels}\"",
    "\tendicia_input=\"${3:\\$pre.repext02.fixed}\"",
    "\tendicia_output=\"${4:\\${runpath\\}OPEN_2011_\\${n\\}_\\${post\\}_endicia.csv}\"",
    "\ttransmit=\"${5:y}\"",
    "\tclient_dir=\"${6:AssetMark_QPR}\"",
    "\tadf_barcode=\"${7:MRDF2DBAR}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "(v04r17c+)\n\nUsing a repext file, create the CSV file used by the Endicia process."
},

"endicia_labels_1": {
  "prefix": "endicia_labels",
  "body": [
    "<command",
    "\tname=\"${1:add_xmtinfo_table_entry}\"",
    ">",
    "\t<![CDATA[ \n\t\t%newxmitinfo = (\n\t\t\t'special' => {\n\t\t\t\t'transtype' => 'ftp',\n\t\t\t\t'edsnat' => '162.27.28.181',\n\t\t\t\t'noneds' => '172.27.12.247',\n\t\t\t\t'userid' => 'na\\\\shiplabl1',\n\t\t\t\t'passwd' => '2getlabels',\n\t\t\t\t'transmode' => 'ascii',\n\t\t\t\t'loc' => 'group\\\\\\\\\\\\\\\\shiplabl\\\\\\\\\\\\\\\\SHIPCON\\\\\\\\\\\\\\\\Endicia',\n\t\t\t\\}\n\t\t);\n\t%xmitinfo=(%xmitinfo,%newxmitinfo);\n\t]]>",
    "</command>",
    "<module",
    "\tname=\"${2:repext_to_endicia_labels}\"",
    "\tmodname=\"${3:endicia_labels}\"",
    "\tendicia_input=\"${4:\\${usrinputs\\}stmt_small.repext}\"",
    "\tendicia_output=\"${5:\\${runpath\\}stmt_small.csv}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "(pre-v04r17c)\n\nUsing a repext file, create the CSV file used by the Endicia process."
},

"genadn01_0": {
  "prefix": "genadn01",
  "body": [
    "<module",
    "\tstepname=\"${1:genadn01}\"",
    "\tmodname=\"${2:genadn01}\"",
    "\tadninp=\"${3:\\${pre\\}.adnout\\${post\\}}\"",
    "\tadnxco=\"${4:134}\"",
    "\tadnxva=\"${5:1}\"",
    "\tadnyco=\"${6:250}\"",
    "\tadnyva=\"${7:20}\"",
    "/>",
    "$0"
  ],
  "description": "Example of an XPDF processed postscript file into the ADN module, where the address lines will be looked for at x/y coordinates of 134/250 for a range of 1 and 20 points respectively.\n\nAddress placement normalization (Postscript address x/y normalization)"
},

"genaft01_0": {
  "prefix": "genaft01",
  "body": [
    "<module",
    "\tstepname=\"${1:genaft01}\"",
    "\tmodname=\"${2:genaft01}\"",
    "\taftinp=\"${3:\\$pre.outadf\\$post}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "genaft01\n\nTransfer an ADF XML feed to the ADF server."
},


"genarc02_0": {
  "prefix": "genarc02",
  "body": [
    "<module",
    "\tstepname=\"${1:genarc02}\"",
    "\tmodname=\"${2:genarc02}\"",
    "\tarcus1=\"${3:7;\\$pre.catout\\$post,\\$pre.outfrp\\$post,\\$pre.outplg\\$post}\"",
    "/>",
    "$0"
  ],
  "description": "Example of data archived for 7 days. Copy of data to /bcs/thup/archive/D7\n\nArchive files and delete the run directory. This module archives the required files for the specified number of days and uses multiple variables for specification. As part of this process, the module creates a directory (with the same name as the run directory) under the archive directory for the number of days specified"
},

"genarc03_0": {
  "prefix": "genarc03",
  "body": [
    "<module",
    "\tname=\"${1:archiving_module}\"",
    "\tmodname=\"${2:genarc03}\"",
    "\tarcdays=\"${3:10}\"",
    "\tarcstore=\"${4:y}\"",
    "\tarcstoredays=\"${5:30}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example of data archived for 30 days.\n\nCleans up old directory and zip backup of directories (EDS) This module serves two purposes. The first is prior run directory and intermediary file cleaning (via arcclean). The second and foremost purpose is to zip or tar up a set of files (usually the entire contents of a run directory) into the site archive directory structure."
},

"genatj01_0": {
  "prefix": "genatj01",
  "body": [
    "<module",
    "\tname=\"${1:add_tray_call}\"",
    "\tmodname=\"${2:genatj01}\"",
    "\tatjinp=\"${3:\\$pre.\\${outmask\\}*}\"",
    "\tatjjog=\"${4:n}\"",
    "\tduplex=\"${5:y}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example of adding tray calls only to a masked set of files\n\nAdds tray call/jog to Postscript file after converting from PDF"
},

"genatj01_1": {
  "prefix": "genatj01",
  "body": [
    "<module",
    "\tname=\"${1:add_tray_call}\"",
    "\tmodname=\"${2:genatj01}\"",
    "\tatjinp=\"${3:\\$pre.\\${outmask\\}*}\"",
    "\tatjpdpvar=\"${4: }\"",
    "\tpdpacro=\"${5:g}\"",
    "\tatjjog=\"${6:n}\"",
    "\tduplex=\"${7:y}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example using ghostscript and override the default atjpdpvar value:\n\nAdds tray call/jog to Postscript file after converting from PDF"
},

"genbat01_0": {
  "prefix": "genbat01",
  "body": [
    "<!-- Module call in Process section -->",
    "<module",
    "\tstepname=\"${1:genbat01}\"",
    "\tmodname=\"${2:genbat01}\"",
    "\tbatctl=\"${3:\\$runpath\\$control}\"",
    "\tbatinp=\"${4:\\$pre.extrac\\$post}\"",
    "\tbatequ=\"${5:y}\"",
    "\tbatopt=\"${6:y}\"",
    "/>",
    "<!-- Batch settings following Printdriver section -->",
    "<genbatch",
    "\tname=\"${7:genbatch}\"",
    "\tinext=\"${8:%%batinp}\"",
    "\toutrej=\"${9:%%batrej}\"",
    "\tcoversheets=\"${10:111111}\"",
    "\tsuppress_empty_files=\"${11:y}\"",
    "\treject_abend_percent=\"${12:0}\"",
    "\tfile_level=\"${13:copy}\"",
    "\tfile_name_case=\"${14:l}\"",
    "\tdisable=\"${15:n}\"",
    ">",
    "\t<paper",
    "\t\tstock_code=\"${16:111111}\"",
    "\t\tthickness=\"${17:01.210}\"",
    "\t\tweight=\"${18:01.100}\"",
    "\t\tdescription=\"${19:tray1}\"",
    "\t\tdisable=\"${20:n}\"",
    "\t/>",
    "\t<paper",
    "\t\tstock_code=\"${21:222222}\"",
    "\t\tthickness=\"${22:01.210}\"",
    "\t\tweight=\"${23:01.100}\"",
    "\t\tdescription=\"${24:tray2}\"",
    "\t\tdisable=\"${25:n}\"",
    "\t/>",
    "\t<papergroup",
    "\t\tdescription=\"${26:paper group1}\"",
    "\t\tcode=\"${27:p}\"",
    "\t\tpaper1=\"${28:111111}\"",
    "\t\tsource1=\"${29:tray1}\"",
    "\t\tpaper2=\"${30:222222}\"",
    "\t\tsource2=\"${31:tray2}\"",
    "\t\tdisable=\"${32:n}\"",
    "\t/>",
    "\t<ome",
    "\t\tdescription=\"${33:ome6x9}\"",
    "\t\tstock_code=\"${34:999991}\"",
    "\t\tthickness=\"${35:01.210}\"",
    "\t\tweight=\"${36:01.110}\"",
    "\t\twidth=\"${37:9.50}\"",
    "\t\tlength=\"${38:6.00}\"",
    "\t\tfold=\"${39:v}\"",
    "\t\tdisable=\"${40:n}\"",
    "\t/>",
    "\t<ome",
    "\t\tdescription=\"${41:ome9x12}\"",
    "\t\tstock_code=\"${42:999992}\"",
    "\t\tthickness=\"${43:01.750}\"",
    "\t\tweight=\"${44:01.220}\"",
    "\t\twidth=\"${45:9.00}\"",
    "\t\tlength=\"${46:12.00}\"",
    "\t\tfold=\"${47:f}\"",
    "\t\tdisable=\"${48:n}\"",
    "\t/>",
    "\t<copy",
    "\t\tnumber=\"${49:01}\"",
    "\t\tpaper_group=\"${50:p}\"",
    "\t\tinserter=\"${51:PB08STD}\"",
    "\t\tdescription=\"${52:copy 01 letters}\"",
    "\t\tdisable=\"${53:n}\"",
    "\t/>",
    "\t<copy",
    "\t\tnumber=\"${54:02}\"",
    "\t\tpaper_group=\"${55:p}\"",
    "\t\tinserter=\"${56:PB08STD}\"",
    "\t\tdescription=\"${57:copy 02 flats}\"",
    "\t\tdisable=\"${58:n}\"",
    "\t/>",
    "\t<copy",
    "\t\tnumber=\"${59:03}\"",
    "\t\tpaper_group=\"${60:p}\"",
    "\t\tinserter=\"${61:PB08STD}\"",
    "\t\tdescription=\"${62:copy 03 hand insert}\"",
    "\t\tdisable=\"${63:n}\"",
    "\t/>",
    "\t<copy",
    "\t\tnumber=\"${64:04}\"",
    "\t\tpaper_group=\"${65:p}\"",
    "\t\tinserter=\"${66:PB08STD}\"",
    "\t\tdescription=\"${67:copy 04 foreign}\"",
    "\t\tdisable=\"${68:n}\"",
    "\t/>",
    "\t<superset",
    "\t\tname=\"${69:superset}\"",
    "\t\tdisable=\"${70:n}\"",
    "\t>",
    "\t\t<set",
    "\t\t\tname=\"${71:M}\"",
    "\t\t\tdescription=\"${72:domestic}\"",
    "\t\t\tdisable=\"${73:n}\"",
    "\t\t/>",
    "\t\t<set",
    "\t\t\tname=\"${74:F}\"",
    "\t\t\tdescription=\"${75:foreign}\"",
    "\t\t\tdisable=\"${76:n}\"",
    "\t\t/>",
    "\t</superset>",
    "\t<basebatch",
    "\t\tdescription=\"${77:basebatch1}\"",
    "\t\tsets=\"${78:M********}\"",
    "\t\tmax_sheets=\"${79:0005}\"",
    "\t\tmail_group=\"${80:2}\"",
    "\t\tcopy=\"${81:01}\"",
    "\t\tome=\"${82:999991}\"",
    "\t\tdisable=\"${83:n}\"",
    "\t/>",
    "\t<basebatch",
    "\t\tdescription=\"${84:basebatch2}\"",
    "\t\tsets=\"${85:M********}\"",
    "\t\tmax_sheets=\"${86:0030}\"",
    "\t\tmail_group=\"${87:4}\"",
    "\t\tcopy=\"${88:02}\"",
    "\t\tome=\"${89:999992}\"",
    "\t\tdisable=\"${90:n}\"",
    "\t/>",
    "\t<basebatch",
    "\t\tdescription=\"${91:basebatch3}\"",
    "\t\tsets=\"${92:M********}\"",
    "\t\tmax_sheets=\"${93:9999}\"",
    "\t\tmail_group=\"${94:9}\"",
    "\t\tcopy=\"${95:03}\"",
    "\t\tome=\"${96:999992}\"",
    "\t\tdisable=\"${97:n}\"",
    "\t/>",
    "\t<basebatch",
    "\t\tdescription=\"${98:basebatch4}\"",
    "\t\tsets=\"${99:F********}\"",
    "\t\tmax_sheets=\"${100:9999}\"",
    "\t\tmail_group=\"${101:9}\"",
    "\t\tcopy=\"${102:04}\"",
    "\t\tome=\"${103:999992}\"",
    "\t\tdisable=\"${104:n}\"",
    "\t/>",
    "</genbatch>",
    "$0"
  ],
  "description": "genbat01 example\n\nDynamically creates batch and copy splits, dynamic insert plans, and batch/copy reports. It also calculates mailsort attributes."
},

"genbmk01_0": {
  "prefix": "genbmk01",
  "body": [
    "<module",
    "\tstepname=\"${1:bookmarking}\"",
    "\tmodname=\"${2:genbmk01}\"",
    "\tbmkinp=\"${3:\\$pre.outpdf\\$post}\"",
    "\tbmkext=\"${4:\\$pre.repext\\$post}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example of PDF file to bookmark. Output file will be ${pre\\}.outpdf_bkmk.pdf\n\nAdds document-level bookmarks to a pdf file. The bookmark values will by default come from the document_key field but can be overridden. Will create page-level bookmarks by specifying only the BMKINP variable."
},

"gencat01_0": {
  "prefix": "gencat01",
  "body": [
    "<module",
    "\tstepname=\"${1:gencat01}\"",
    "\tmodname=\"${2:gencat01}\"",
    "\tcatinp=\"${3:\\$pre.file1\\$post}\"",
    "\tcatout=\"${4:\\$pre.file2\\$post}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example File1 will be concatenated to File2. If File2 is not created File2 will be a copy of File1.\n\nConcatenate one or more files to another file"
},

"gencmg01_0": {
  "prefix": "gencmg01",
  "body": [
    "<module",
    "\tname=\"${1:flag_commingle_docs}\"",
    "\tmodname=\"${2:gencmg01}\"",
    "\tcmginp=\"${3:\\$pre.catout\\$post}\"",
    "\tcmgout=\"${4:\\$pre.cmgout\\$post}\"",
    "\tcmgrpt=\"${5:\\$pre.cmgrpt\\$post}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "gencmg01 example\n\nFlags documents/records that qualify for commingle process with a 'C' in 1244 (9th set-level)."
},

"gencmp01_0": {
  "prefix": "gencmp01",
  "body": [
    "<module",
    "\tstepname=\"${1:gencmp01}\"",
    "\tmodname=\"${2:gencmp01}\"",
    "\tcmpone=\"${3:\\$pre.file1\\$post}\"",
    "\tcmptwo=\"${4:\\$pre.file2\\$post}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "gencmp01 example\n\nCompare two files"
},

"gencom01_0": {
  "prefix": "gencom01",
  "body": [
    "<module",
    "\tstepname=\"${1:gencom01}\"",
    "\tmodname=\"${2:gencom01}\"",
    "\tcomtyp=\"${3:d}\"",
    "\tcomctl=\"${4:\\$file_name}\"",
    "\tcomver=\"${5:\\$Dialogue_Version}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "Running Dialogue:\n\nRuns composition engines - currently only works with dialogue."
},

"gencpn01_0": {
  "prefix": "gencpn01",
  "body": [
    "<module",
    "\tname=\"${1:coupon_optimizer}\"",
    "\tmodname=\"${2:gencpn01}\"",
    "\tcpninp=\"${3:\\$pre.\\${repmask\\}01}\"",
    "\tcpnext=\"${4:\\$pre.repext\\$post}\"",
    "\tcpn_page_height=\"${5:198}\"",
    "\tcpn_page_width=\"${6:527}\"",
    "\tcpn_columns=\"${7:1}\"",
    "\tcpn_rows=\"${8:4}\"",
    "\tcpn_data_type=\"${9:pdf}\"",
    "\tcpn_data_type_out=\"${10:pdf}\"",
    "\tcpn_page_width_out=\"${11:527}\"",
    "\tcpn_page_height_out=\"${12:801}\"",
    "\tcpn_pad_sheets=\"${13:n}\"",
    "\tcpn_pad_stacks=\"${14:n}\"",
    "\tcpn_doc_order=\"${15:a}\"",
    "\tcpn_page_order=\"${16:a}\"",
    "\tcpn_fill_order=\"${17:r}\"",
    "\tcpn_column_margin=\"${18:0}\"",
    "\tcpn_column_gutter=\"${19:0}\"",
    "\tcpn_column_order=\"${20:l}\"",
    "\tcpn_column_creep=\"${21:0}\"",
    "\tcpn_row_margin=\"${22:0}\"",
    "\tcpn_row_gutter=\"${23:0}\"",
    "\tcpn_row_order=\"${24:t}\"",
    "\tcpn_row_creep=\"${25:0}\"",
    "\tcpn_scale=\"${26:100}\"",
    "\tcpn_duplex=\"${27:n}\"",
    "\tcpn_compression=\"${28:0}\"",
    "\tcpn_front_rotation1=\"${29:0}\"",
    "\tcpn_front_rotation2=\"${30:0}\"",
    "\tcpn_back_rotation1=\"${31:0}\"",
    "\tcpn_back_rotation2=\"${32:0}\"",
    "\tcpn_optimize=\"${33:y}\"",
    "\tdisable=\"${34:n}\"",
    "/>",
    "$0"
  ],
  "description": "gencpn01 example\n\nCoupon optimization and generation."
},

"gencpy01_0": {
  "prefix": "gencpy01",
  "body": [
    "<module",
    "\tstepname=\"${1:gencpy01}\"",
    "\tmodname=\"${2:gencpy01}\"",
    "\tcpyinp=\"${3:\\$pre.input\\$post}\"",
    "\tcpyout=\"${4:\\$pre.output\\$post}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "Single file Example\n\nCopy the Input file to the Output file or directory"
},

"gencpy01_1": {
  "prefix": "gencpy01",
  "body": [
    "<module",
    "\tstepname=\"${1:gencpy01_wildcard}\"",
    "\tmodname=\"${2:gencpy01}\"",
    "\tcpyinp=\"${3:\\${userinput\\}*.pdf}\"",
    "\tcpyout=\"${4:\\${runpath\\}}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "Multiple file Example\n\nCopy the Input file to the Output file or directory"
},

"gencsz01_0": {
  "prefix": "gencsz01",
  "body": [
    "<module",
    "\tstepname=\"${1:gencsz01}\"",
    "\tmodname=\"${2:gencsz01}\"",
    "\tcszinp=\"${3:\\$pre.input\\$post}\"",
    "\tcszout=\"${4:\\$pre.output\\$post}\"",
    "\tcszad1=\"${5:1}\"",
    "\tcszad2=\"${6:51}\"",
    "\tcszad3=\"${7:101}\"",
    "\tcszad4=\"${8:151}\"",
    "\tcszad5=\"${9:201}\"",
    "\tcszad6=\"${10:251}\"",
    "\tcszad7=\"${11:301}\"",
    "\tcszad8=\"${12:351}\"",
    "/>",
    "$0"
  ],
  "description": "gencsz01 example\n\nIsolates the elements of an address including isolating the city, state, and zip from the specified address lines. Address line length is maximum of 50 characters."
},

"genddc01_0": {
  "prefix": "genddc01",
  "body": [
    "<module",
    "\tstepname=\"${1:genddc01}\"",
    "\tmodname=\"${2:genddc01}\"",
    "\tddcmaster=\"${3:/bcs/\\$psite\\$lvlc/common/\\$pi\\$pjt.dupdatachk.txt}\"",
    "\tddcinput=\"${4:\\$pre.ddcinput\\$post.txt}\"",
    "\tddcoutput=\"${5:\\$pre.ddcoutput\\$post.txt}\"",
    "\tddccomp=\"${6:\\$pre.extrac\\$post}\"",
    "\tddcerror=\"${7:\\$pre.ddcerror\\$post.txt}\"",
    "\tddcdays=\"${8:180}\"",
    "\tddcculled=\"${9:\\$pre.ddcculled\\$post.txt}\"",
    "\tddcfail=\"${10:y}\"",
    "\tdisable=\"${11:n}\"",
    "/>",
    "$0"
  ],
  "description": "genddc01 example\n\nDetects duplicate records across multiple runs based on on the DOC_KEY (PowerStreamExtLayout) extract variable. This was primarily designed to ensure that check jobs never re-used the same check number, but it can be used to prevent duplicate data from being processed on any job with unique DOC_KEY values."
},

"gendel01_0": {
  "prefix": "gendel01",
  "body": [
    "<module",
    "\tstepname=\"${1:gendel01}\"",
    "\tmodname=\"${2:gendel01}\"",
    "\tdelinp=\"${3:\\$pre.file1\\$post}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "Single File Example\n\nDelete one or more files"
},

"gendel01_1": {
  "prefix": "gendel01",
  "body": [
    "<module",
    "\tstepname=\"${1:gendel01}\"",
    "\tmodname=\"${2:gendel01}\"",
    "\tdelinp=\"${3:\\$pre.file1\\$post,\\$pre.file2\\$post,\\$pre.file3\\$post}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "Multiple File Example\n\nDelete one or more files"
},

"gendie01_0": {
  "prefix": "gendie01",
  "body": [
    "<module",
    "\tstepname=\"${1:gendie01}\"",
    "\tmodname=\"${2:gendie01}\"",
    "\tdierc=\"${3:99}\"",
    "\tdiemsg=\"${4:User Abort: Check output - Aborting process with code 99.}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "gendie01 example\n\nAbort a process"
},

"gendmt01_0": {
  "prefix": "gendmt01",
  "body": [
    "<module",
    "\tstepname=\"${1:gendmt01}\"",
    "\tmodname=\"${2:gendmt01}\"",
    "\tdmtinp=\"${3:\\$pre.nomail\\$post}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "gendmt01 example\n\nDMTS (Direct Mail Taxation System) processing for nomail or special files (anything but msort* files) The formatted zip code file will be created, named appropriately and transmitted to DMTS server."
},

"gendmt01_1": {
  "prefix": "gendmt01",
  "body": [
    "<module",
    "\tstepname=\"${1:gendmt01}\"",
    "\tmodname=\"${2:gendmt01}\"",
    "\tdmtinp=\"${3:\\$pre.nomail\\$post}\"",
    "\tdmts_type=\"${4:a}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "gendmt01 For an Automated billing DMTS (MDTS) file, specify dmts_type=\"a\".\n\nDMTS (Direct Mail Taxation System) processing for nomail or special files (anything but msort* files) The formatted zip code file will be created, named appropriately and transmitted to DMTS server."
},

"gendmt02_0": {
  "prefix": "gendmt02",
  "body": [
    "<module",
    "\tstepname=\"${1:gendmt01}\"",
    "\tmodname=\"${2:gendmt01}\"",
    "\tdmtinp=\"${3:\\$pre.nomail\\$post}\"",
    "/>",
    "$0"
  ],
  "description": "gendmt02 example\n\nDMTS (Direct Mail Taxation System) processing for nomail or special files (anything but msort* files). This now uses the GENPRP module for printing reports."
},

"gendrt01_0": {
  "prefix": "gendrt01",
  "body": [
    "<module",
    "\tname=\"${1:gendrt01}\"",
    "\tmodname=\"${2:gendrt01}\"",
    "\tdrtprjis=\"${3:COBR}\"",
    "\tdrtccpvt=\"${4:ADR}\"",
    "\tdrtpcpvt=\"${5:1200}\"",
    "\tdrto01pos=\"${6:0001}\"",
    "\tdrto01len=\"${7:010}\"",
    "\tdrto02pos=\"${8:0011}\"",
    "\tdrto02len=\"${9:050}\"",
    "\tdrto03pos=\"${10:0061}\"",
    "\tdrto03len=\"${11:050}\"",
    "\tdrto04pos=\"${12:0111}\"",
    "\tdrto04len=\"${13:050}\"",
    "\tdrtcb01pos=\"${14:0001}\"",
    "\tdrtcb01len=\"${15:010}\"",
    "\tdrtcb02pos=\"${16:0011}\"",
    "\tdrtcb02len=\"${17:050}\"",
    "\tdrtcb03pos=\"${18:0061}\"",
    "\tdrtcb03len=\"${19:050}\"",
    "\tdrtcb04pos=\"${20:0111}\"",
    "\tdrtcb04len=\"${21:050}\"",
    "\tdrtf01pos=\"${22:0101}\"",
    "\tdrtf01len=\"${23:010}\"",
    "\tdrtf02pos=\"${24:0111}\"",
    "\tdrtf02len=\"${25:050}\"",
    "\tdrtf03pos=\"${26:0161}\"",
    "\tdrtf03len=\"${27:050}\"",
    "\tdrtf04pos=\"${28:0211}\"",
    "\tdrtf04len=\"${29:050}\"",
    "\tdrtf05pos=\"${30:0261}\"",
    "\tdrtf05len=\"${31:050}\"",
    "\tdrtf06pos=\"${32:0311}\"",
    "\tdrtf06len=\"${33:050}\"",
    "\tdrtf07pos=\"${34:0401}\"",
    "\tdrtf07len=\"${35:039}\"",
    "\tdrtf08pos=\"${36:0440}\"",
    "\tdrtf08len=\"${37:050}\"",
    "\tdrtf09pos=\"${38:0000}\"",
    "\tdrtf09len=\"${39:000}\"",
    "\tdrtf10pos=\"${40:0000}\"",
    "\tdrtf10len=\"${41:000}\"",
    "\tdrtactpos=\"${42:0011}\"",
    "\tdrtactlen=\"${43:010}\"",
    "\tdrtfrnpos=\"${44:0023}\"",
    "\tdrtfrnlen=\"${45:012}\"",
    "\tdrtltnpos=\"${46:0001}\"",
    "\tdrtltnlen=\"${47:007}\"",
    "\tdrtcidpos=\"${48:2223}\"",
    "\tdrtcidlen=\"${49:012}\"",
    "\tdrtcltjn=\"${50:jobnumber1}\"",
    "\tdrtcltfn=\"${51:clientfilename.txt}\"",
    "\tdrtcltfd=\"${52:03/14/2012}\"",
    "\tdrtxmit=\"${53:y}\"",
    "\tdrtlvl=\"${54:\\$lvli}\"",
    "\tdrtste=\"${55:T}\"",
    "\tdisable=\"${56:n}\"",
    "/>",
    "$0"
  ],
  "description": "gendrt01 example\n\nCreates Pivot database reporting file for powerstream input. Reads all of the rep extract files in the runpath. This module needs to be put after the rep extract file is created. Note: WARNING Please do not have duplicates of your repext files. The program looks for any files matching $fffile.repext*"
},

"gendrt02_0": {
  "prefix": "gendrt02",
  "body": [
    "<module",
    "\tname=\"${1:gendrt02}\"",
    "\tmodname=\"${2:gendrt02}\"",
    "\tdrtxmit=\"${3:y}\"",
    "\tdrtlvl=\"${4:\\$lvli}\"",
    "\tdrtste=\"${5:J}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "gendrt02 example\n\nCreates Pivot database report for damaged pieces file - powerstream input. Reads all of the matout files in the runpath. This module needs to be placed after the genmis01 in the reprint_process."
},

"gendrt03_0": {
  "prefix": "gendrt03",
  "body": [
    "<module",
    "\tname=\"${1:gendrt03}\"",
    "\tmodname=\"${2:gendrt03}\"",
    "\tdrtxmit=\"${3:y}\"",
    "\tdrtlvl=\"${4:\\$lvli}\"",
    "\tdrtste=\"${5:L}\"",
    "\tdrtdatetype=\"${6:fn}\"",
    "\tdrtfilename=\"${7:\\$ffile.input01}\"",
    "\tdrtqty=\"${8:230}\"",
    "\tdrtdrdate=\"${9:20141216 14:04:20}\"",
    "\tdisable=\"${10:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example: Input file\n\nCreates Pivot database reporting file status."
},

"gendrt03_1": {
  "prefix": "gendrt03",
  "body": [
    "<module",
    "\tname=\"${1:gendrt03}\"",
    "\tmodname=\"${2:gendrt03}\"",
    "\tdrtxmit=\"${3:y}\"",
    "\tdrtlvl=\"${4:\\$lvli}\"",
    "\tdrtste=\"${5:L}\"",
    "\tdrtdatetype=\"${6:mr}\"",
    "\tdrtfilename=\"${7:\\$ffile.input01}\"",
    "\tdrtqty=\"${8:230}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example: Pony Express using current date time\n\nCreates Pivot database reporting file status."
},

"gendup01_0": {
  "prefix": "gendup01",
  "body": [
    "<module",
    "\tname=\"${1:dupcheck}\"",
    "\tmodname=\"${2:gendup01}\"",
    "\tdupkeep=\"${3:20}\"",
    "\tdupact=\"${4:2}\"",
    "\tdupto=\"${5:michael.t.olson\\\\\\\\\\\\@rrd.com}\"",
    "\tdupfr=\"${6:michael.t.olson\\\\\\\\\\\\@rrd.com}\"",
    "\tdupmask1=\"${7:/bcs/lgn\\$lvl/clientapp/\\$pi\\$pjt/input/lgn\\$lvl.fin.gld0000.lbfn.input}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "gendup01 example\n\nDeprecated in v04r18b+ Use: duplicate_file_check Keeps track of input files through a md5 checksum hash for duplicate file checking."
},

"genect01_0": {
  "prefix": "genect01",
  "body": [
    "<module",
    "\tstepname=\"${1:genect01}\"",
    "\tmodname=\"${2:genect01}\"",
    "\tectinp=\"${3:\\$pre.outepc*}\"",
    "\tepcsnd=\"${4:y}\"",
    "\tdisable=\"${5:t}\"",
    "/>",
    "$0"
  ],
  "description": "genect01 example\n\nThis module takes epic file(s) and concatenates them together. Fields 4,5,6, and 7 are summed and a new copy based epic file is rewritten - ready for InfoShare. It will then send the file to InfoShare. The epic send can be turned off by setting epcsnd=n."
},

"genemf01_0": {
  "prefix": "genemf01",
  "body": [
    "<module",
    "\tstepname=\"${1:genemf01}\"",
    "\tmodname=\"${2:genemf01}\"",
    "\temffrp=\"${3:y}\"",
    "\temfbat=\"${4:A1D00101}\"",
    "\temfeml=\"${5:n}\"",
    "\temfdesc=\"${6:\\$RECON_STEP_NAME}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "genemf01 example\n\nEmpty file processing. A zero quantity 'outfrp' and 'outplg' reports are created along with outepc (Epic reporting) and mrgrcn (for reconciliation) files"
},

"geneml01_0": {
  "prefix": "geneml01",
  "body": [
    "<module",
    "\tstepname=\"${1:geneml01}\"",
    "\tmodname=\"${2:geneml01}\"",
    "\temlto=\"${3:david.williams-logan\\\\\\\\\\\\@rrd.com}\"",
    "\temlfr=\"${4:david.williams-logan\\\\\\\\\\\\@rrd.com}\"",
    "\temlsub=\"${5:Test Email}\"",
    "\temlbody=\"${6:Email body}\"",
    "\temlatt=\"${7:\\$pre.outfrp01.txt}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "Basic Example:\n\nSend an email with optional CC’s and attachments"
},

"geneml01_1": {
  "prefix": "geneml01",
  "body": [
    "<!-- Module call in Process section -->",
    "<module",
    "\tname=\"${1:geneml01}\"",
    "\tmodname=\"${2:geneml01}\"",
    "\temlto=\"${3:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\temlfr=\"${4:james.k.richards\\\\\\\\\\\\@rrd.com@#(*\\$&@*#@(\\$}\"",
    "\temlsub=\"${5:ttprept reporting in!}\"",
    "\temlbody=\"${6:\\${inbasename_ASCII\\}.pdf has been created and sent to Hyde Park.}\"",
    "\temlatt=\"${7:\\${usrscripts\\}new_files_detector_log.txt}\"",
    "\tonerror_emailnottransmitted=\"${8:email_failed_process}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "<!-- In a separate process  -->",
    "<process",
    "\tname=\"${10:email_failed_process}\"",
    "\tdisable=\"${11:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${12:geneml01}\"",
    "\t\tmodname=\"${13:geneml01}\"",
    "\t\temlto=\"${14:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\t\temlfr=\"${15:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\t\temlsub=\"${16:ttprept: emailstep failed.}\"",
    "\t\temlbody=\"${17:Email was rejected at the server for some reason, investigate because the client will not receive that email.}\"",
    "\t\tdisable=\"${18:n}\"",
    "\t/>",
    "\t<assign",
    "\t\tname=\"${19:keep_converting_please}\"",
    "\t\trc=\"${20:2}\"",
    "\t/>",
    "</process>",
    "$0"
  ],
  "description": "Transmission OnError Example\n\nSend an email with optional CC’s and attachments"
},

"geneml01_2": {
  "prefix": "geneml01",
  "body": [
    "<!-- Module call in Process section -->",
    "<module",
    "\tname=\"${1:geneml01}\"",
    "\tmodname=\"${2:geneml01}\"",
    "\temlto=\"${3:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\temlfr=\"${4:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\temlsub=\"${5:ttprept reporting in!}\"",
    "\temlbody=\"${6:Attached are all the reports for the job}\"",
    "\temlatt=\"${7:\\${runpath\\}*rept}\"",
    "\tonerror_emailattachmenttoolarge=\"${8:email_failed_process}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "<!-- In a separate process  -->",
    "<process",
    "\tname=\"${10:email_failed_process}\"",
    "\temlbody=\"${11:\\$emlbody\\\\n\\$file is too large to be attached, it will not be included in the email!\\\\n}\"",
    "\trc=\"${12:0}\"",
    "\tdisable=\"${13:n}\"",
    "/>",
    "$0"
  ],
  "description": "Attachment Too Large OnError Example\n\nSend an email with optional CC’s and attachments"
},

"genemp01_0": {
  "prefix": "genemp01",
  "body": [
    "<module",
    "\tstepname=\"${1:genemp01}\"",
    "\tmodname=\"${2:genemp01}\"",
    "\tempinp=\"${3:\\$pre.c01_batout.txt}\"",
    "/>",
    "<if",
    "\tname=\"${4:if_post_process_empty_check_\\$loop_counter2}\"",
    ">",
    "\t<condition",
    "\t\tname=\"${5:condition_post_process_empty_check_\\$loop_counter2}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$emprc == 0) ]]>",
    "\t\t<subprocess",
    "\t\t\tname=\"${6:post_process_\\$loop_counter2}\"",
    "\t\t\tprocessname=\"${7:post_process}\"",
    "\t\t\tdisable=\"${8:n}\"",
    "\t\t/>",
    "\t</condition>",
    "\t<else",
    "\t\tname=\"${9:else_post_process_empty_check_\\$loop_counter2}\"",
    "\t>",
    "\t\t<module",
    "\t\t\tname=\"${10:empty_file_for_\\$loop_counter2}\"",
    "\t\t\tmodname=\"${11:genemf01}\"",
    "\t\t\temffrp=\"${12:y}\"",
    "\t\t\temfbat=\"${13:\\$batchid}\"",
    "\t\t\temftyp=\"${14:batch}\"",
    "\t\t\temfeml=\"${15:n}\"",
    "\t\t\temfdesc=\"${16:\\$RECON_STEP_NAME}\"",
    "\t\t\tdisable=\"${17:n}\"",
    "\t\t/>",
    "\t</else>",
    "</if>",
    "$0"
  ],
  "description": "Example:\n\nEmpty file/Directory check"
},

"generd01_0": {
  "prefix": "generd01",
  "body": [
    "<module",
    "\tname=\"${1:generd01_call}\"",
    "\tmodname=\"${2:generd01}\"",
    "\terdinp=\"${3:\\$pre.outfrp\\$post}\"",
    "\terdtyp=\"${4:t}\"",
    "\terdlevel=\"${5:copy}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "generd01 example\n\nElectronic Report Distribution Module. Creates Text and Postscript (by conversion) or PDF (by selecting no conversions)"
},

"generd02_0": {
  "prefix": "generd02",
  "body": [
    "<module",
    "\tname=\"${1:generd02_call}\"",
    "\tmodname=\"${2:generd02}\"",
    "\tptkversion=\"${3:/apps/pdftk_2.01/bin/pdftk}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "generd02 example\n\nMass Electronic Report Distribution Module sends a PDF version of a all standard reports to Infoshare. Creates the mass report transmission list to be sent with the GENERD01 Module"
},

"generd03_0": {
  "prefix": "generd03",
  "body": [
    "<module",
    "\tname=\"${1:generd03_call}\"",
    "\tmodname=\"${2:generd03}\"",
    "\terdlevel=\"${3:copy}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "without specifying ERDINP where PowerStream will rely on the standard file/report naming convention. This method should be used at the end of the job (at the final_process):\n\nMass Electronic Report Distribution Module - Sends a PDF version of Reports to Remote File Servers. Currently this module will work for Hyde Park and West Caldwell."
},

"generd03_1": {
  "prefix": "generd03",
  "body": [
    "<module",
    "\tname=\"${1:generd03_call_prod_reports}\"",
    "\tmodname=\"${2:generd03}\"",
    "\terdlevel=\"${3:copy}\"",
    "\terdinp=\"${4:\\${pre\\}.prod\\${post\\}.reports.txt}\"",
    "\terdout=\"${5:\\${ffile\\}.prod\\${post\\}.reports.pdf}\"",
    "\terdtyp=\"${6:p}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "sending the production reports (this can go in the print_reports_process to replace genprr01 for Hyde Park)\n\nMass Electronic Report Distribution Module - Sends a PDF version of Reports to Remote File Servers. Currently this module will work for Hyde Park and West Caldwell."
},

"generd03_2": {
  "prefix": "generd03",
  "body": [
    "<module",
    "\tname=\"${1:generd03_call_msort_reports}\"",
    "\tmodname=\"${2:generd03}\"",
    "\terdlevel=\"${3:copy}\"",
    "\terdinp=\"${4:\\${pre\\}.msort\\${post\\}.reports.txt}\"",
    "\terdout=\"${5:\\${ffile\\}.msort\\${post\\}.reports.pdf}\"",
    "\terdtyp=\"${6:u}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "sending the usps/mailsort reports (this can go in the msort_reports_process to replace genprr01 for Hyde Park)\n\nMass Electronic Report Distribution Module - Sends a PDF version of Reports to Remote File Servers. Currently this module will work for Hyde Park and West Caldwell."
},

"generd03_3": {
  "prefix": "generd03",
  "body": [
    "<module",
    "\tname=\"${1:generd03_call_batch_report}\"",
    "\tmodname=\"${2:generd03}\"",
    "\terdlevel=\"${3:copy}\"",
    "\terdinp=\"${4:\\${runpath\\}custom_batrpt.txt}\"",
    "\terdout=\"${5:\\${ffile\\}.batrpt.pdf}\"",
    "\terdtyp=\"${6:b}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "sending the batch/component report NOTE: Change the ERDINP value to actual batch report file name, if not using the standard naming convention.\n\nMass Electronic Report Distribution Module - Sends a PDF version of Reports to Remote File Servers. Currently this module will work for Hyde Park and West Caldwell."
},

"generd03_4": {
  "prefix": "generd03",
  "body": [
    "<module",
    "\tname=\"${1:generd03_call_mrdf_reports}\"",
    "\tmodname=\"${2:generd03}\"",
    "\terdlevel=\"${3:copy}\"",
    "\terdinp=\"${4:\\${runpath\\}*_prpt.txt}\"",
    "\terdtyp=\"${5:m}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "sending the MRDF reports - this can go after the genmft01 module call (for MRDF project)\n\nMass Electronic Report Distribution Module - Sends a PDF version of Reports to Remote File Servers. Currently this module will work for Hyde Park and West Caldwell."
},

"genexs01_0": {
  "prefix": "genexs01",
  "body": [
    "<module",
    "\tstepname=\"${1:genexs01}\"",
    "\tmodname=\"${2:genexs01}\"",
    "\texsinp=\"${3:\\$pre.pdpout\\$post}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "genexs01 example\n\nReads a file generated by genpdt01 (using pdftotext for text extractions from encrypted fonts) and generates a pseudo extract file (same format - PowerStreamExtLayout) of the text elements that were identified in the control file and places the decrypted data in the pseudo extract file."
},

"genext01_0": {
  "prefix": "genext01",
  "body": [
    "<module",
    "\tstepname=\"${1:generic_extract}\"",
    "\tmodname=\"${2:genext01}\"",
    "\textinp=\"${3:\\$inwork}\"",
    "\trecon_step_name=\"${4:Extract Input}\"",
    "/>",
    "$0"
  ],
  "description": "Basic Example:\n\nReads a printstream input file, identifies documents and fields, calculates pages, create a direct access version of the print image data, and creates an extract text file with key document level variables and a reference to the direct access document data."
},

"genext01_1": {
  "prefix": "genext01",
  "body": [
    "<loop",
    "\tname=\"${1:loop_extract_dialog_out}\"",
    "\tloop_dir=\"${2:\\$runpath}\"",
    "\tloop_filemask=\"${3:.outpdf01}\"",
    "\tloop_max_process=\"${4:4}\"",
    "\tmemo=\"${5:loop_counter for iteration of loop}\"",
    "\tdisable=\"${6:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${7:extract}\"",
    "\t\tmodname=\"${8:genext01}\"",
    "\t\textinp=\"${9:\\$loop_dir_curfile}\"",
    "\t\textsto=\"${10:\\$extinp}\"",
    "\t\textrac=\"${11:\\$pre.extracxx\\$loop_counter}\"",
    "\t\textres=\"${12:\\$pre.resourxx\\$loop_counter}\"",
    "\t\textaud=\"${13:\\$pre.audrptxx\\$loop_counter}\"",
    "\t\textsid=\"${14:\\$pre.extsidxx\\$loop_counter}\"",
    "\t\textrcn=\"${15:\\$pre.extrcnxx\\$loop_counter}\"",
    "\t\tdisable=\"${16:n}\"",
    "\t/>",
    "\t<module",
    "\t\tname=\"${17:concat_extrac}\"",
    "\t\tmodname=\"${18:gencat01}\"",
    "\t\tcatinp=\"${19:\\$pre.extracxx\\$loop_counter}\"",
    "\t\tcatout=\"${20:\\$pre.extrac01}\"",
    "\t\tcatapp=\"${21:y}\"",
    "\t\tdisable=\"${22:n}\"",
    "\t/>",
    "\t<module",
    "\t\tname=\"${23:concat_audrpt}\"",
    "\t\tmodname=\"${24:gencat01}\"",
    "\t\tcatinp=\"${25:\\$pre.audrptxx\\$loop_counter}\"",
    "\t\tcatout=\"${26:\\$pre.audrpt01}\"",
    "\t\tcatapp=\"${27:y}\"",
    "\t\tdisable=\"${28:n}\"",
    "\t/>",
    "\t<module",
    "\t\tname=\"${29:concat_extrcn}\"",
    "\t\tmodname=\"${30:gencat01}\"",
    "\t\tcatinp=\"${31:\\$pre.extrcnxx\\$loop_counter}\"",
    "\t\tcatout=\"${32:\\$pre.extrcn01}\"",
    "\t\tcatapp=\"${33:y}\"",
    "\t\tdisable=\"${34:n}\"",
    "\t/>",
    "\t<module",
    "\t\tname=\"${35:del_cleanup_extfiles}\"",
    "\t\tmodname=\"${36:gendel01}\"",
    "\t\tdelinp=\"${37:\\$pre.extracxx\\$loop_counter,\\$pre.extrcnxx\\$loop_counter,\\$pre.audrptxx\\$loop_counter,\\$pre.resourxx\\$loop_counter,\\$pre.extsidxx\\$loop_counter}\"",
    "\t\tdisable=\"${38:n}\"",
    "\t/>",
    "</loop>",
    "$0"
  ],
  "description": "Example of multi-threaded/process extract of PDF files\n\nReads a printstream input file, identifies documents and fields, calculates pages, create a direct access version of the print image data, and creates an extract text file with key document level variables and a reference to the direct access document data."
},

"genext01_2": {
  "prefix": "genext01",
  "body": [
    "<defaults",
    "\tdiskoption=\"${1:local}\"",
    "\tmemo=\"${2:Setting here serves as a universal flag.}\"",
    "\tdisable=\"${3:n}\"",
    "/>",
    "<!-- OR -->",
    "<module",
    "\tname=\"${4:extract}\"",
    "\tmodname=\"${5:genext}\"",
    "\textinp=\"${6:\\$inimg}\"",
    "\tdiskoption=\"${7:local}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "<!-- MATCHING FLAG IN PRINTDRIVER -->",
    "<printdriver",
    "\tinimg=\"${9:%%extinp}\"",
    "\toutext=\"${10:%%extrac}\"",
    "\tinext=\"${11:%%mrgext}\"",
    "\trepext=\"${12:%%mrgrex}\"",
    "\tdisk_option=\"${13:%%diskoption}\"",
    "\tmemo=\"${14:    many other settings here ...}\"",
    "\tdisable=\"${15:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example using diskoption\n\nReads a printstream input file, identifies documents and fields, calculates pages, create a direct access version of the print image data, and creates an extract text file with key document level variables and a reference to the direct access document data."
},

"genftp01_0": {
  "prefix": "genftp01",
  "body": [
    "<module",
    "\tstepname=\"${1:genftp01}\"",
    "\tmodname=\"${2:genftp01}\"",
    "\tftphst=\"${3:172.27.12.200}\"",
    "\tftpusr=\"${4:lpdaw1}\"",
    "\tftppas=\"${5:12345678}\"",
    "\tftptyp=\"${6:ascii}\"",
    "\tftpfil=\"${7:\\$pre.c\\$c\\$\\\\batout.txt}\"",
    "\tftpout=\"${8:'\\$FFILE\\$\\\\.C\\$c\\$\\\\.BATOUT}\"",
    "\tftpquo=\"${9:site recfm=FB lrecl=3000 blocksize=0 cylinders primary=250 secondary=250 conddisp=catlg unit=sysda}\"",
    "/>",
    "$0"
  ],
  "description": "genftp01 example\n\nFTP a file"
},

"genfxr01_0": {
  "prefix": "genfxr01",
  "body": [
    "<module",
    "\tname=\"${1:prepare_file_for_pdf_conversion}\"",
    "\tmodname=\"${2:genfxr01}\"",
    "\tfxrinp=\"${3:\\$inwork}\"",
    "\tfxrout=\"${4:\\${runpath\\}test.txt}\"",
    "\tfxrmff=\"${5:y}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "genfxr01 example\n\nNormalize report formats to ansii carriage control format from mixed and formfeed formats from the mainframe."
},

"genhhd01_0": {
  "prefix": "genhhd01",
  "body": [
    "<!-- Module call in Process section -->",
    "<module",
    "\tstepname=\"${1:genhhd01}\"",
    "\tmodname=\"${2:genhhd01}\"",
    "\thhdinp=\"${3:\\$pre.extrac01}\"",
    "\thhdcriteria=\"${4:addr}\"",
    "\thhdele=\"${5:householding}\"",
    "\thhdbuild=\"${6:n}\"",
    "/>",
    "<!-- Program setting in Printdriver section -->",
    "<printdriver",
    "\tadf_type=\"${7:%%adf_type}\"",
    "\tbreak_quantity=\"${8:%%chunk_qty}\"",
    "\tbreak_type=\"${9:%%brk_type}\"",
    "\tbreak_unit=\"${10:sysda}\"",
    "\tfloat_address=\"${11:up}\"",
    "\thousehold=\"${12:%%household}\"",
    "\tinext=\"${13:%%mrgext}\"",
    "\tinimg=\"${14:%%extinp}\"",
    "\twork=\"${15:%%extsto}\"",
    "\tsubext=\"${16:%%mrgsub}\"",
    "\thwrk=\"${17:%%mrghhd}\"",
    "/>",
    "<genhold",
    "\tname=\"${18:householding}\"",
    "\tinext=\"${19:%%hhdinp}\"",
    "\touthhd=\"${20:%%hhdext}\"",
    "\touthold=\"${21:%%hhdimf}\"",
    "\toutsys=\"${22:%%hhdsys}\"",
    "\toutrcn=\"${23:%%hhdrcn}\"",
    "\tcriteria=\"${24:%%hhdcriteria}\"",
    "\tdisable=\"${25:n}\"",
    "/>",
    "$0"
  ],
  "description": "Simple householding by ADDR fields criteria below. For more complex examples see GenHold\n\nSimple or complex householding, or combining of documents. (see GenHold section for details)"
},

"genidx01_0": {
  "prefix": "genidx01",
  "body": [
    "<!-- Module call in Process section -->",
    "<module",
    "\tstepname=\"${1:genidx01}\"",
    "\tmodname=\"${2:genidx01}\"",
    "\tidxinp=\"${3:\\$pre.repext\\$post}\"",
    "/>",
    "<!-- Program settings typically added before the Information section GenIndexer attributes -->",
    "<genindexer",
    "\tinext=\"${4:%%idxinp}\"",
    "\toutidx=\"${5:%%idxidx}\"",
    "\toutshp=\"${6:%%idxshp}\"",
    "\ttitle=\"${7:%%client %%n}\"",
    "\ttitle1=\"${8:%%client secondary title}\"",
    "\tdbtitle=\"${9:%%client_date_formatted}\"",
    "\ttype=\"${10:%%pi%%n%%.1}\"",
    "\tother1=\"${11:master order: %%or copy: %%c}\"",
    "\tother2=\"${12: }\"",
    "\tdbdir=\"${13:%%client_date_formatted}\"",
    "\tmoddb=\"${14:%%pi%%.mod.ald}\"",
    "\tmrcmodrdf=\"${15:%%pi%%.mod.rdf}\"",
    "\tdefmodel=\"${16:%%pi%%.mod.def}\"",
    "\tmdb=\"${17:%%client_mdb}\"",
    "\tpdfnamestart=\"${18:2109}\"",
    "\tpdfnamelength=\"${19:43}\"",
    "\tfilename=\"${20:%%date%%n%%c%%batch%%._}\"",
    "\tfilenamestart=\"${21:34}\"",
    "\tfilenamelength=\"${22:25}\"",
    "\tfilesequence=\"${23:y}\"",
    "\tfiledate=\"${24:y}\"",
    "\tpagecountstart=\"${25:112}\"",
    "\tpagecountlength=\"${26:12}\"",
    "\tinitial_page_offset=\"${27:0}\"",
    "\tname=\"${28:genindexer}\"",
    "\tdisable=\"${29:n}\"",
    ">",
    "\t<indexkey",
    "\t\tname=\"${30:account number}\"",
    "\t\tstart=\"${31:2228}\"",
    "\t\tlength=\"${32:9}\"",
    "\t\tdisable=\"${33:n}\"",
    "\t/>",
    "\t<indexkey",
    "\t\tname=\"${34:admin. officer code}\"",
    "\t\tstart=\"${35:2242}\"",
    "\t\tlength=\"${36:3}\"",
    "\t\tdisable=\"${37:n}\"",
    "\t/>",
    "\t<ship",
    "\t\tname=\"${38:ship}\"",
    "\t\tshipby=\"${39:ups}\"",
    "\t\tshiptype=\"${40:2nd Day Air}\"",
    "\t\tshipcode=\"${41:005}\"",
    "\t\tshiphousehold=\"${42:yes}\"",
    "\t\tshipcopies=\"${43:1}\"",
    "\t\tshipaccount=\"${44:``}\"",
    "\t\tshiporder=\"${45:%%or}\"",
    "\t\tshipphone=\"${46: }\"",
    "\t\tusedata=\"${47:no}\"",
    "\t\tshipname=\"${48:shipto Name}\"",
    "\t\tshipcomp=\"${49:Company name}\"",
    "\t\tshipaddr1=\"${50:9991 Anystreet St.}\"",
    "\t\tshipaddr2=\"${51:City, ST 98899}\"",
    "\t\tshipaddr3=\"${52: }\"",
    "\t\tdisable=\"${53:n}\"",
    "\t/>",
    "</genindexer>",
    "$0"
  ],
  "description": "genidx01 example\n\nCreate CD or Internet preferred page index and shipping files"
},

"geninv01_0": {
  "prefix": "geninv01",
  "body": [
    "<module",
    "\tstepname=\"${1:geninv01}\"",
    "\tmodname=\"${2:geninv01}\"",
    "\tinvidx=\"${3:\\$pre.idxidx\\$post}\"",
    "\tinvpdf=\"${4:\\$pre.pdnoxxxx.c\\$post.cr0001}\"",
    "\tinvtyp=\"${5:eps}\"",
    "/>",
    "$0"
  ],
  "description": "geninv01 example\n\nIndexing validation. This validates the Index file and PDF file have matching quantities, solimar keys, etc. It also will generate a 888 file that is used to trigger the Solimar validation process if Solimar validate is selected."
},

"genlbl01_0": {
  "prefix": "genlbl01",
  "body": [
    "<module",
    "\tmodname=\"${1:genlbl01}\"",
    "\tname=\"${2:generate_labels}\"",
    "\tlblele=\"${3:labels}\"",
    "\tlblinp=\"${4:\\$pre.repext\\$post}\"",
    "\tlblselect=\"${5:y}\"",
    "\tlblstart=\"${6:99}\"",
    "\tlbllength=\"${7:12}\"",
    "\tlblcompare=\"${8:ge}\"",
    "\tlblvalue=\"${9:000000000031}\"",
    "\tlblxmit=\"${10:p}\"",
    "\tlblxmt=\"${11:\\$PI\\$n\\$c.pdf}\"",
    "\tdisable=\"${12:n}\"",
    "/>",
    "$0"
  ],
  "description": "PDF Label Example:\n\nThe label module is designed for all projects that need a simple interface to label processing. Create a label file for the ShipCon label program or create independent PDF labels. Optionally select the records to create labels for, convert the input file from another layout, and transmit the label file to the label server."
},

"genlbl01_1": {
  "prefix": "genlbl01",
  "body": [
    "<module",
    "\tmodname=\"${1:genlbl01}\"",
    "\tname=\"${2:generate_labels}\"",
    "\tlblinp=\"${3:\\$pre.repext\\$post}\"",
    "\tlblselect=\"${4:y}\"",
    "\tlblstart=\"${5:99}\"",
    "\tlbllength=\"${6:12}\"",
    "\tlblcompare=\"${7:ge}\"",
    "\tlblvalue=\"${8:000000000031}\"",
    "\tlblxmit=\"${9:y}\"",
    "\tlblxmt=\"${10:\\$PI\\$n\\$c.TXT}\"",
    "\tdisable=\"${11:n}\"",
    "/>",
    "$0"
  ],
  "description": "Shipcon Example:\n\nThe label module is designed for all projects that need a simple interface to label processing. Create a label file for the ShipCon label program or create independent PDF labels. Optionally select the records to create labels for, convert the input file from another layout, and transmit the label file to the label server."
},

"genmat01_0": {
  "prefix": "genmat01",
  "body": [
    "<module",
    "\tstepname=\"${1:genmat01}\"",
    "\tmodname=\"${2:genmat01}\"",
    "\tmatele=\"${3:match_files}\"",
    "\tmatinp=\"${4:\\$pre.matinp\\$c}\"",
    "\tmatlst=\"${5:\\$pre.matlst\\$c}\"",
    "/>",
    "$0"
  ],
  "description": "Simple Example:\n\nReads an input file and looks up matching records in a list file based on matching keys. Matching records are sent to the output, and updated from data in the matching record if desired."
},

"genmcd01_0": {
  "prefix": "genmcd01",
  "body": [
    "<module",
    "\tstepname=\"${1:metacode_cd_postprocess}\"",
    "\tmodname=\"${2:genmcd01}\"",
    "\tmcdinp=\"${3:\\$pre.repext\\$post}\"",
    "\tmcdin2=\"${4:\\$pre.outlst\\$post}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "genmcd01 example:\n\nConvert Metacode files for Electronic Product Services (EPS) aka CD-ROM Archival. Rename the *menmxxxx* to *nmpdhydr* in the repext and outlst files for metacode cd processing because it needs to go through crawford to be converted to pdf."
},

"genmft01_0": {
  "prefix": "genmft01",
  "body": [
    "<module",
    "\tstepname=\"${1:genmft01}\"",
    "\tmodname=\"${2:genmft01}\"",
    "\tmftdir=\"${3:\\$runpath}\"",
    "\tmftmsk=\"${4:mrdf}\"",
    "/>",
    "$0"
  ],
  "description": "genmft01 example\n\nTransfer MRDF files to server"
},

"genmis01_0": {
  "prefix": "genmis01",
  "body": [
    "<module",
    "\tname=\"${1:missing_numbers}\"",
    "\tmodname=\"${2:genmis01}\"",
    "\tmisinp=\"${3:\\$inreprint}\"",
    "\tmisdat=\"${4:\\$pre.repext\\$post}\"",
    "\tmistyp=\"${5:eds}\"",
    "\tmisget=\"${6:m}\"",
    "\tqrecs=\"${7:1}\"",
    "\tcrfsnd=\"${8:y}\"",
    "\tepcsnd=\"${9:n}\"",
    "\tmrgext=\"${10:\\$matout}\"",
    "\tmrgimg=\"${11:\\$prev.vi01.st01}\"",
    "\tmrgbat=\"${12:\\$runpath\\$\\\\batinf.txt}\"",
    "\trepmask=\"${13:menmxxxx.c\\$c\\$\\\\xx.d\\$v}\"",
    "\tjobtype=\"${14:missing numbers}\"",
    "\tmrgrsc=\"${15:\\$genparms\\$\\\\postscript.ps}\"",
    "\ttplpri=\"${16:com}\"",
    "/>",
    "$0"
  ],
  "description": "genmis01 example\n\nMissing number module (Built to handle the bulk of the missing number process). The arcrep variable contains the path to the files which are retrieved by this GENMIS01 module."
},

"genmov01_0": {
  "prefix": "genmov01",
  "body": [
    "<module",
    "\tstepname=\"${1:genmov01}\"",
    "\tmodname=\"${2:genmov01}\"",
    "\tmovinp=\"${3:\\$pre.input\\$post}\"",
    "\tmovout=\"${4:\\$pre.output\\$post}\"",
    "/>",
    "$0"
  ],
  "description": "Moving a single file:\n\nMove/rename a file to another name/location. Directory names are not allowed. Module will ignore a move of a directory."
},

"genmov01_1": {
  "prefix": "genmov01",
  "body": [
    "<module",
    "\tstepname=\"${1:genmov_multilple_files}\"",
    "\tmodname=\"${2:genmov01}\"",
    "\tmovinp=\"${3:\\${usrinput\\}*.pdf}\"",
    "\tmovout=\"${4:\\${runpath\\}}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "Moving multiple files:\n\nMove/rename a file to another name/location. Directory names are not allowed. Module will ignore a move of a directory."
},

"genmpf01_0": {
  "prefix": "genmpf01",
  "body": [
    "<module",
    "\tstepname=\"${1:genmpf01}\"",
    "\tmodname=\"${2:genmpf01}\"",
    "\tmpfmask=\"${3:pull}\"",
    "/>",
    "$0"
  ],
  "description": "genmpf01 example\n\nTransfer MRDF \"pull\" files to the Pitney-Bowes server. The server will automatically recognize the pull file and set the divert flag in the MRDF for the piece_ids specified in the pull file. These pieces will then be diverted during the inserting process."
},

"genmrf01_0": {
  "prefix": "genmrf01",
  "body": [
    "<module",
    "\tstepname=\"${1:genmrf01}\"",
    "\tmodname=\"${2:genmrf01}\"",
    "\tmrfdir=\"${3:\\$runpath}\"",
    "\tmrfmsk=\"${4:\\$runid\\$\\\\_mend.txt}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "genmrf01 example:\n\nFile transfer of MRDF manual repair files to the server"
},

"genmrg01_0": {
  "prefix": "genmrg01",
  "body": [
    "<module",
    "\tstepname=\"${1:genmrg01}\"",
    "\tmodname=\"${2:genmrg01}\"",
    "\treprint_run=\"${3:n}\"",
    "\tepcsnd=\"${4:y}\"",
    "\tqrecs=\"${5:100}\"",
    "\tmrgext=\"${6:\\$pre.catout\\$post}\"",
    "\tmrgimg=\"${7:\\$prev.vi01.st01}\"",
    "\tmrgbat=\"${8:\\$runpath\\$\\\\batinf.txt}\"",
    "\trecon_step_name=\"${9:output_\\$post}\"",
    "\tdisable=\"${10:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example with batching\n\nReads an extract file and rebuilds an output printstream based on the extract order, using the direct access print image data file"
},

"genmrg01_1": {
  "prefix": "genmrg01",
  "body": [
    "<defaults",
    "\tdiskoption=\"${1:local}\"",
    "\tmemo=\"${2:Setting here serves as a universal flag.}\"",
    "\tdisable=\"${3:n}\"",
    "/>",
    "<!-- OR -->",
    "<module",
    "\tname=\"${4:merge}\"",
    "\tmodname=\"${5:genmrg}\"",
    "\tmrgext=\"${6:\\$postfile}\"",
    "\tmrgimg=\"${7:\\${runpath\\}outpdfcat}\"",
    "\tmrgbat=\"${8:\\${runpath\\}batinf.txt}\"",
    "\tmrgrsc=\"${9:\\${genparms\\}pdf.pdf}\"",
    "\tdiskoption=\"${10:local}\"",
    "\tdisable=\"${11:n}\"",
    "/>",
    "<!-- MATCHING FLAG IN PRINTDRIVER -->",
    "<printdriver",
    "\tinimg=\"${12:%%extinp}\"",
    "\toutext=\"${13:%%extrac}\"",
    "\tinext=\"${14:%%mrgext}\"",
    "\trepext=\"${15:%%mrgrex}\"",
    "\tdisk_option=\"${16:%%diskoption}\"",
    "\tbreak_quantity=\"${17:50000}\"",
    "\tbreak_type=\"${18:pages}\"",
    "\tmemo=\"${19:    many other settings here ...}\"",
    "\tdisable=\"${20:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example using diskoption\n\nReads an extract file and rebuilds an output printstream based on the extract order, using the direct access print image data file"
},

"genmst07_0": {
  "prefix": "genmst07",
  "body": [
    "<module",
    "\tname=\"${1:mailsort}\"",
    "\tmodname=\"${2:genmst07}\"",
    "\tmstinp=\"${3:\\$postfile}\"",
    "\tmstatr=\"${4:\\$runpath\\$\\\\batat\\$msize.txt}\"",
    "\tmsflgsw=\"${5:n}\"",
    "\tmsinssw=\"${6:n}\"",
    "\tmsembsw=\"${7:n}\"",
    "\tcomment_l1=\"${8:       }\"",
    "\tcomment_l2=\"${9:       }\"",
    "\tmsacsw=\"${10:y}\"",
    "\tmspni=\"${11:y}\"",
    "\tmscpi=\"${12:n}\"",
    "\tmsofn=\"${13:\\$pi2\\$n\\$batch}\"",
    "\tmspbar=\"${14:\\$pre.mspbar\\$batch}\"",
    "\trelease=\"${15:\\$lvl}\"",
    "/>",
    "$0"
  ],
  "description": "Basic mailsort Example\n\nMailsort and Address Hygiene. Many variables are obtained from Project Manager working together with the Programmer to fill in the Mailsort Worksheet. LINK to Mailsort Worksheet: ​Mailsort Worksheet. Please also refer to IMB variables link for details on Intelligent Mail Barcode."
},

"genmst07_1": {
  "prefix": "genmst07",
  "body": [
    "<module",
    "\tname=\"${1:firstpass_mailsort_\\$batchid\\$c}\"",
    "\tmodname=\"${2:genmst07}\"",
    "\tdisable=\"${3:n}\"",
    "\tms2psw=\"${4:first}\"",
    "\tmstinp=\"${5:\\${postfile\\}}\"",
    "\tmstatr=\"${6:\\${runpath\\}batat\\$msize.txt}\"",
    "\tmsacsw=\"${7:y}\"",
    "\tmsflgsw=\"${8:n}\"",
    "\tmsinssw=\"${9:n}\"",
    "\tmsembsw=\"${10:n}\"",
    "\tcomment_l1=\"${11:       }\"",
    "\tcomment_l2=\"${12:       }\"",
    "\tmspni=\"${13:y}\"",
    "\tmscpi=\"${14:n}\"",
    "\trelease=\"${15:\\$lvl}\"",
    "/>",
    "$0"
  ],
  "description": "CASS First Pass Example:\n\nMailsort and Address Hygiene. Many variables are obtained from Project Manager working together with the Programmer to fill in the Mailsort Worksheet. LINK to Mailsort Worksheet: ​Mailsort Worksheet. Please also refer to IMB variables link for details on Intelligent Mail Barcode."
},

"genmst07_2": {
  "prefix": "genmst07",
  "body": [
    "<module",
    "\tname=\"${1:mailsort}\"",
    "\tmodname=\"${2:genmst07}\"",
    "\tmstinp=\"${3:\\$postfile}\"",
    "\tmstatr=\"${4:\\${runpath\\}batat\\$msize.txt}\"",
    "\tmsacsw=\"${5:y}\"",
    "\tmansw=\"${6:y}\"",
    "\tmsflgsw=\"${7:n}\"",
    "\tmsinssw=\"${8:n}\"",
    "\tmsembsw=\"${9:n}\"",
    "\tmsimspn=\"${10:0}\"",
    "\tmclass=\"${11:1}\"",
    "\tmspni=\"${12:y}\"",
    "\tmscpi=\"${13:y}\"",
    "\tmsimopt=\"${14:2}\"",
    "\tmsmum=\"${15:2}\"",
    "\tmsmud=\"${16:%%date8}\"",
    "\tmsimomid=\"${17:897763}\"",
    "\tmsimomil=\"${18:6}\"",
    "\tmsimocri=\"${19:15076467}\"",
    "\tmsimpmid=\"${20:107655}\"",
    "\tmsimpmil=\"${21:6}\"",
    "\tmsimpcri=\"${22:193469}\"",
    "\tmsimpop=\"${23:T}\"",
    "\tmszp4bc=\"${24:I}\"",
    "\tmscnum=\"${25:0000000022500}\"",
    "\tmsimmid=\"${26:897763}\"",
    "\tmsimmln=\"${27:6}\"",
    "\tmsimsln=\"${28:6}\"",
    "\tmsimssw=\"${29:A}\"",
    "\tmsimstc=\"${30:260}\"",
    "\tmsimstc2=\"${31:300}\"",
    "\tmdmfcr=\"${32:14306}\"",
    "\tmsofn=\"${33:E\\${n\\}\\$c\\${batch_short\\}}\"",
    "\tcomment_l1=\"${34:       }\"",
    "\tcomment_l2=\"${35:       }\"",
    "\trelease=\"${36:\\$lvl}\"",
    "\tMSMDATSW=\"${37:y}\"",
    "\tdisable=\"${38:n}\"",
    "/>",
    "$0"
  ],
  "description": "Mailsort with IMB variables Example:\n\nMailsort and Address Hygiene. Many variables are obtained from Project Manager working together with the Programmer to fill in the Mailsort Worksheet. LINK to Mailsort Worksheet: ​Mailsort Worksheet. Please also refer to IMB variables link for details on Intelligent Mail Barcode."
},

"genmul01_0": {
  "prefix": "genmul01",
  "body": [
    "<module",
    "\tstepname=\"${1:genmul01}\"",
    "\tmodname=\"${2:genmul01}\"",
    "\tmuldir=\"${3:\\$pjtpath\\$\\\\/input}\"",
    "\tmuldirout=\"${4:\\$runpath}\"",
    "\tmulinp=\"${5:pdf}\"",
    "\tmulcat=\"${6:y}\"",
    "\tcatout=\"${7:\\$pre.concat_out.txt}\"",
    "\tmulmod=\"${8:genpdp01.pl}\"",
    "\tmuldel=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "genmul01 example:\n\nThis module executes a sub-module in a loop against each file that meets the mask in the specified directory."
},

"gennup01_0": {
  "prefix": "gennup01",
  "body": [
    "<module",
    "\tname=\"${1:reorder_or_impose_pages}\"",
    "\tmodname=\"${2:gennup01}\"",
    "\tnupinp=\"${3:\\$pre.\\${outmask\\}*}\"",
    "\tnup_data_type=\"${4:pdf}\"",
    "\tnup_data_type_out=\"${5:pdf}\"",
    "\tnup_page_width=\"${6:612}\"",
    "\tnup_page_height=\"${7:792}\"",
    "\tnup_page_width_out=\"${8:612}\"",
    "\tnup_page_height_out=\"${9:792}\"",
    "\tnup_pad_sheets=\"${10:y}\"",
    "\tnup_pad_stacks=\"${11:y}\"",
    "\tnup_doc_order=\"${12:ascending}\"",
    "\tnup_page_order=\"${13:ascending}\"",
    "\tnup_fill_order=\"${14:rows}\"",
    "\tnup_columns=\"${15:1}\"",
    "\tnup_rows=\"${16:3}\"",
    "\tnup_depth=\"${17:500}\"",
    "\tnup_column_margin=\"${18:0}\"",
    "\tnup_column_gutter=\"${19:0}\"",
    "\tnup_column_order=\"${20:left_to_right}\"",
    "\tnup_column_creep=\"${21:0}\"",
    "\tnup_row_margin=\"${22:0}\"",
    "\tnup_row_gutter=\"${23:0}\"",
    "\tnup_row_order=\"${24:top_to_bottom}\"",
    "\tnup_row_creep=\"${25:0}\"",
    "\tnup_scale=\"${26:100}\"",
    "\tnup_duplex=\"${27:y}\"",
    "\tnup_compression=\"${28:0}\"",
    "\tnup_front_rotation1=\"${29:0}\"",
    "\tnup_front_rotation2=\"${30:0}\"",
    "\tnup_back_rotation1=\"${31:0}\"",
    "\tnup_back_rotation2=\"${32:0}\"",
    "\tdisable=\"${33:n}\"",
    "/>",
    "$0"
  ],
  "description": "example:\n\nReorder PDF pages. Orders include reverse pagination, imposition, n-up (booklet, postcard)."
},

"genop01_0": {
  "prefix": "genop01",
  "body": [
    "<module",
    "\tstepname=\"${1:genoup01}\"",
    "\tmodname=\"${2:genoup01}\"",
    "\tdisable=\"${3:n}\"",
    "/>",
    "$0"
  ],
  "description": "genop01 example:\n\nOrder update. (Used with auto order number processing only)"
},

"genpcp01_0": {
  "prefix": "genpcp01",
  "body": [
    "<module",
    "\tstepname=\"${1:genpcp01}\"",
    "\tmodname=\"${2:genpcp01}\"",
    "\tpcpinp=\"${3:\\$pre.inimg01}\"",
    "\tpcpvar=\"${4:-RU:12}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "PCLtoPDF Example:\n\nPCL to PDF conversion"
},

"genpcp01_1": {
  "prefix": "genpcp01",
  "body": [
    "<module",
    "\tstepname=\"${1:genpcp01}\"",
    "\tmodname=\"${2:genpcp01}\"",
    "\tpcpinp=\"${3:\\$pre.inimg01}\"",
    "\tpcptype=\"${4:ghostpcl}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "GhostPCL Example:\n\nPCL to PDF conversion"
},

"genpdp01_0": {
  "prefix": "genpdp01",
  "body": [
    "<module",
    "\tstepname=\"${1:genpdp01}\"",
    "\tmodname=\"${2:genpdp01}\"",
    "\tpdpinp=\"${3:\\$pre.vpl9999.pdf}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "genpdp01 example:\n\nPDF to Postscript conversion"
},

"genpdt01_0": {
  "prefix": "genpdt01",
  "body": [
    "<module",
    "\tstepname=\"${1:genpdt01}\"",
    "\tmodname=\"${2:genpdt01}\"",
    "\tpdtinp=\"${3:\\$pre.vpl9999.pdf}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "example:\n\nPDF to Text conversion"
},

"genpdx01_0": {
  "prefix": "genpdx01",
  "body": [
    "<module",
    "\tname=\"${1:genpdx01}\"",
    "\tmodname=\"${2:genpdx01}\"",
    "\tpdxinp=\"${3:\\$pre.vpl9999.pdf}\"",
    "/>",
    "$0"
  ],
  "description": "This example will produce one PDF per page, using the control number as the filenames. It will then zip up those PDFs into pdxout\n\nThis module is a PDF to Postscript/PDF exploder. It generates self-sufficient documents. It will generate them by page count or by index file reference (extract layout). This module is not designed for processing extract/repext files concatenated from multiple copies/batches. However, you can make it work with a multi-copy/batch file by placing your control, copy and/or batch numbers in a contiguous field and then tell genpdx01 to use that field for the filename(s) via pdxname_start and pdxname_length. All output files are named according to these fields also, which defaults to the 7-digit control number."
},

"genpdx01_1": {
  "prefix": "genpdx01",
  "body": [
    "<module",
    "\tname=\"${1:generate_pdf_proof_file}\"",
    "\tmodname=\"${2:genpdx01}\"",
    "\tpdxidx=\"${3:\\$pre.repcatmod}\"",
    "\tpdxcombo=\"${4:y}\"",
    "\tpdxname_start=\"${5:2301}\"",
    "\tpdxname_length=\"${6:10}\"",
    "\tpdxproofs=\"${7:y}\"",
    "\tpdxtyp=\"${8:pdf}\"",
    "\tpdxzip=\"${9:n}\"",
    "\tpdxout=\"${10:\\$pre.pdnoxxxx.c00xx.cr00}\"",
    "\tpdx_max_processes=\"${11:1}\"",
    "\tdisable=\"${12:n}\"",
    "/>",
    "$0"
  ],
  "description": "This example is using an index/extract input with records flagged as proofs. With pdxproofs=y, it will only select marked records to burst out and name them according to the data in position 2301 for 10 bytes. All output PDFs will be combined into pdxout. Nothing gets zipped up.\n\nThis module is a PDF to Postscript/PDF exploder. It generates self-sufficient documents. It will generate them by page count or by index file reference (extract layout). This module is not designed for processing extract/repext files concatenated from multiple copies/batches. However, you can make it work with a multi-copy/batch file by placing your control, copy and/or batch numbers in a contiguous field and then tell genpdx01 to use that field for the filename(s) via pdxname_start and pdxname_length. All output files are named according to these fields also, which defaults to the 7-digit control number."
},

"genpdx02_0": {
  "prefix": "genpdx02",
  "body": [
    "<module",
    "\tname=\"${1:genpdx02}\"",
    "\tmodname=\"${2:genpdx02}\"",
    "\tpdxinp=\"${3:\\$pre.vpl9999.pdf}\"",
    "/>",
    "$0"
  ],
  "description": "This example will produce one PDF per page, using the control number as the filenames. It will then zip up those PDFs into pdxout\n\nThis module is a near-complete re-write of the genpdx01 module. It is designed for Acxiom processing and for improved performance by using the parbatch script from Powerstream's rrdcom repository. If you are using genpdx01 and experiencing longer processing periods, give this module a try. Not all aspects of this module have been tested as of it's original release on 7/8/14."
},

"genpdx02_1": {
  "prefix": "genpdx02",
  "body": [
    "<module",
    "\tname=\"${1:generate_pdf_proof_file}\"",
    "\tmodname=\"${2:genpdx02}\"",
    "\tpdxidx=\"${3:\\$pre.repcatmod}\"",
    "\tpdxcombo=\"${4:y}\"",
    "\tpdxname_start=\"${5:2301}\"",
    "\tpdxname_length=\"${6:10}\"",
    "\tpdxproofs=\"${7:y}\"",
    "\tpdxtyp=\"${8:pdf}\"",
    "\tpdxzip=\"${9:n}\"",
    "\tpdxout=\"${10:\\$pre.pdnoxxxx.c00xx.cr00}\"",
    "\tpdx_max_processes=\"${11:1}\"",
    "\tdisable=\"${12:n}\"",
    "/>",
    "$0"
  ],
  "description": "This example is using an index/extract input with records flagged as proofs. With pdxproofs=y, it will only select marked records to burst out and name them according to the data in position 2301 for 10 bytes. All output PDFs will be combined into pdxout. Nothing gets zipped up.\n\nThis module is a near-complete re-write of the genpdx01 module. It is designed for Acxiom processing and for improved performance by using the parbatch script from Powerstream's rrdcom repository. If you are using genpdx01 and experiencing longer processing periods, give this module a try. Not all aspects of this module have been tested as of it's original release on 7/8/14."
},

"genpnm01_0": {
  "prefix": "genpnm01",
  "body": [
    "<module",
    "\tstepname=\"${1:genpnm01}\"",
    "\tmodname=\"${2:genpnm01}\"",
    "\tpnminp=\"${3:\\$pre.vpl9999.ps}\"",
    "\tpnmout=\"${4:\\$pre.vpl9999nm\\$c\\$\\\\.ps}\"",
    "\tpnmfnt=\"${5:/usr/share/ghostscript/fonts}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "genpnm01 example:\n\nPostscript normalization"
},

"genpre01_0": {
  "prefix": "genpre01",
  "body": [
    "<module",
    "\tname=\"${1:pre_setup}\"",
    "\tmodname=\"${2:genpre01}\"",
    "\tprecpy=\"${3:n}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "Basic example:\n\nSets up the run directory and log for the run, as well as allowing the option of copying or moving the input file into the run directory."
},

"genpre01_1": {
  "prefix": "genpre01",
  "body": [
    "<!-- Module call in Process section -->",
    "<module",
    "\tname=\"${1:pre_setup}\"",
    "\tmodname=\"${2:genpre01}\"",
    "\tprecpy=\"${3:m}\"",
    "\tonerror_zerolengthfile=\"${4:pre_setup_onerror_zerolength_routine}\"",
    "\tonerror_filenotfound=\"${5:pre_setup_onerror_filenotfound_routine}\"",
    "\tmemo=\"${6: }\"",
    "\tdisable=\"${7:t}\"",
    "/>",
    "<!-- In a separate processes  -->",
    "<process",
    "\tname=\"${8:pre_setup_onerror_zerolength_routine}\"",
    "\tdisable=\"${9:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${10:geneml_for_onerror_zero}\"",
    "\t\tmodname=\"${11:geneml01}\"",
    "\t\temlto=\"${12:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\t\temlfr=\"${13:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\t\temlsub=\"${14:INPUT file is ZERO length - contact Client}\"",
    "\t\temlbody=\"${15:Input file is empty - contact Client}\"",
    "\t\tdisable=\"${16:n}\"",
    "\t/>",
    "</process>",
    "<process",
    "\tname=\"${17:pre_setup_onerror_filenotfound_routine}\"",
    "\tdisable=\"${18:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${19:geneml_for_onerror_nofile}\"",
    "\t\tmodname=\"${20:geneml01}\"",
    "\t\temlto=\"${21:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\t\temlfr=\"${22:james.k.richards\\\\\\\\\\\\@rrd.com}\"",
    "\t\temlsub=\"${23:No Input file has been received - contact Client}\"",
    "\t\temlbody=\"${24:The regularly scheduled INPUT file has not been received.  Please contact Client}\"",
    "\t\tdisable=\"${25:n}\"",
    "\t/>",
    "</process>",
    "$0"
  ],
  "description": "OnError Example:\n\nSets up the run directory and log for the run, as well as allowing the option of copying or moving the input file into the run directory."
},

"genprr01_0": {
  "prefix": "genprr01",
  "body": [
    "<module",
    "\tname=\"${1:print_report}\"",
    "\tmodname=\"${2:genprr01}\"",
    "\tprrinp=\"${3:\\$pre.batrpt01}\"",
    "\tprrcls=\"${4:print}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example:\n\nPrints a report or reports on MVS spool printer. On Linux projects the files to print are transmitted to the appropriate mainframe and submitted to the requested print classes / queues."
},

"genprr01_1": {
  "prefix": "genprr01",
  "body": [
    "<module",
    "\tstepname=\"${1:print_msort_reports}\"",
    "\tmodname=\"${2:genprr01}\"",
    "\tprrinp=\"${3:\\$pre.msort\\$post.reports.txt}\"",
    "\tprrcls=\"${4:mailrm1}\"",
    "\tprrflag=\"${5:T}\"",
    "\tprrpmn=\"${6:Some PM}\"",
    "\tprrdep=\"${7:Mailroom}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "Thurmont Example:\n\nPrints a report or reports on MVS spool printer. On Linux projects the files to print are transmitted to the appropriate mainframe and submitted to the requested print classes / queues."
},

"genpsm01_0": {
  "prefix": "genpsm01",
  "body": [
    "<module",
    "\tname=\"${1:PDF_SAM_Merge_for_customer_\\$customernumber}\"",
    "\tmodname=\"${2:genpsm01}\"",
    "\tpsminp=\"${3:\\$filelist}\"",
    "\tpsmvar=\"${4:-overwrite concat}\"",
    "\tpsmout=\"${5:\\${runpath\\}\\$customerfile}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "genpsm01 example\n\nPDF Split and Merge tool for PDF manipulation"
},

"genpsp01_0": {
  "prefix": "genpsp01",
  "body": [
    "<module",
    "\tname=\"${1:postscript_to_pdf}\"",
    "\tmodname=\"${2:genpsp01}\"",
    "\tpspinp=\"${3:\\$pre.out\\$post.ps}\"",
    "\tpspout=\"${4:\\$pre.out\\$post.pdf}\"",
    "\tpspfnt=\"${5:/usr/share/ghostscript/fonts}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "genpsp01 example:\n\nPostscript to PDF conversion"
},

"genptk01_0": {
  "prefix": "genptk01",
  "body": [
    "<module",
    "\tstepname=\"${1:genptk01}\"",
    "\tmodname=\"${2:genptk01}\"",
    "\tptkinp=\"${3:\\$pre.vpl9999.pdf}\"",
    "/>",
    "$0"
  ],
  "description": "Simple Example:\n\nPDF tool PDF manipulation"
},

"genptk01_1": {
  "prefix": "genptk01",
  "body": [
    "<module",
    "\tname=\"${1:genptk01}\"",
    "\tmodname=\"${2:genptk01}\"",
    "\tptktyp=\"${3:t}\"",
    "\tptkinp=\"${4:\\$pre.ttpout\\$post.ps.pdf}\"",
    "\tptkout=\"${5:\\$pre.encrypted.pdf}\"",
    "\tptkenc=\"${6:y}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "encryption:\n\nPDF tool PDF manipulation"
},

"genptk01_2": {
  "prefix": "genptk01",
  "body": [
    "<module",
    "\tname=\"${1:cat_genptk_step_0\\$loop_counter}\"",
    "\tstepname=\"${2:genptk01}\"",
    "\tmodname=\"${3:genptk01}\"",
    "\tptktyp=\"${4:t}\"",
    "\tptkversion=\"${5:/apps/pdftk_2.01/bin/pdftk}\"",
    "\tptkinp=\"${6:\\$pre.ttpout\\$loop_counter2.ps.pdf}\"",
    "\tptkvar=\"${7: \\${usrparms\\}ValueCoverLetter.pdf \\${usrparms\\}ValueEquitySector.pdf cat output}\"",
    "\tptkout=\"${8:\\$pre.masterdocument\\$formattedcount.pdf}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "PDFTK variables:\n\nPDF tool PDF manipulation"
},

"genptk01_3": {
  "prefix": "genptk01",
  "body": [
    "<system",
    "\tname=\"${1:cat_pdfs_system}\"",
    "\tcommand=\"${2:\\${genloads\\}genpdfcat -l:\\$inputfile -o:\\$pre.outputfile.pdf}\"",
    "\tdisable=\"${3:n}\"",
    "/>",
    "$0"
  ],
  "description": "System call:\n\nPDF tool PDF manipulation"
},

"genpul01_0": {
  "prefix": "genpul01",
  "body": [
    "<process",
    "\tname=\"${1:manual_pull_process}\"",
    ">",
    "\t<module",
    "\t\tname=\"${2:pul_module}\"",
    "\t\tmodname=\"${3:genpul01}\"",
    "\t\tpulinp=\"${4:\\$pre.repext\\$post}\"",
    "\t\tpullst=\"${5:\\${runpath\\}usrlst.txt}\"",
    "\t\tpulstart=\"${6:1}\"",
    "\t\tpullength=\"${7:25}\"",
    "\t\textstart=\"${8:34}\"",
    "\t\textlength=\"${9:25}\"",
    "\t/>",
    "</process>",
    "$0"
  ],
  "description": "genpul01 example:\n\nGenerate a pull report for manual pulls."
},

"genrcn01_0": {
  "prefix": "genrcn01",
  "body": [
    "<!-- Module call in Process section -->",
    "<module",
    "\tname=\"${1:reconciliation_post}\"",
    "\tmodname=\"${2:genrcn01}\"",
    "\temlbhtm=\"${3:wrap}\"",
    "\trcnbatt=\"${4:\\$pre.rcnrpt02}\"",
    "\trcnele=\"${5:pre_post_recon}\"",
    "\trcneml=\"${6:y}\"",
    "\trcnfr=\"${7:\\$eml_from}\"",
    "\trcnin0=\"${8:\\$pre.extrcnall}\"",
    "\trcnin1=\"${9:\\$pre.rcncat02}\"",
    "\trcnin9=\"${10:\\$pre.client.countsall}\"",
    "\trcnto=\"${11:\\$eml_pm,\\$eml_prog,\\$eml_client}\"",
    "\trcntto=\"${12:\\$eml_test}\"",
    "\trcntyp=\"${13:post}\"",
    "\tdisable=\"${14:n}\"",
    "/>",
    "<!-- Recon settings following Printdriver section -->",
    "<genrecon",
    "\tname=\"${15:pre_post_recon}\"",
    "\tlocation_code=\"${16:%%location_code}\"",
    "\tclient=\"${17:%%client}\"",
    "\tclient_code=\"${18:%%client_code}\"",
    "\tproject=\"${19:%%project}\"",
    "\tproject_code=\"${20:%%project_code}\"",
    "\tcopy=\"${21:%%c}\"",
    "\tbatch=\"${22:%%batch}\"",
    "\torder=\"${23:%%or}\"",
    "\treport_type=\"${24:%%rcntyp}\"",
    "\trcninp=\"${25:%%rcninp}\"",
    "\trcndat=\"${26:%%rcndat}\"",
    "\trcnrpt=\"${27:%%rcnrpt}\"",
    "\trun=\"${28:%%run}\"",
    "\tsheets=\"${29:report}\"",
    "\tdocuments=\"${30:reconcile}\"",
    "\tpages=\"${31:report}\"",
    "\tdisable=\"${32:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example of module call along with associated system xml code. Reconciling document counts only.\n\nReconcile and report on all desired counts for a project and fail the run if numbers do not match up. Optionally send an email notification. See the GenRecon section for more detailed information about the reconciliation process."
},

"genrcx01_0": {
  "prefix": "genrcx01",
  "body": [
    "<module",
    "\tname=\"${1:custom_recon_feed}\"",
    "\tmodname=\"${2:genrcx01}\"",
    "\trcxinp=\"${3:\\$pre.extrac\\$post}\"",
    "\trcxdes=\"${4:input}\"",
    "\trcxopt=\"${5:s}\"",
    "\trcxtyp=\"${6:input}\"",
    "/>",
    "$0"
  ],
  "description": "single file example\n\nCreates a reconciliation file from an extract record formatted file, or the comparison of two extract record formatted files."
},

"genrcx01_1": {
  "prefix": "genrcx01",
  "body": [
    "<module",
    "\tname=\"${1:custom_client_recon_feed}\"",
    "\tmodname=\"${2:genrcx01}\"",
    "\trcxdes=\"${3:PDF Statements}\"",
    "\trcxopt=\"${4:s}\"",
    "\trcxtyp=\"${5:client}\"",
    "\trcxrcn=\"${6:\\$pre.rcnclt\\$post}\"",
    "\trcxsheetstotal=\"${7:\\$totalsheetcount}\"",
    "\trcxpagestotal=\"${8:\\$totalpagecount}\"",
    "\trcxdocumentstotal=\"${9:\\$totaldoccount}\"",
    "\tdisable=\"${10:n}\"",
    "/>",
    "$0"
  ],
  "description": "single file example with user override option:\n\nCreates a reconciliation file from an extract record formatted file, or the comparison of two extract record formatted files."
},

"genrcx01_2": {
  "prefix": "genrcx01",
  "body": [
    "<module",
    "\tname=\"${1:custom_recon_feed}\"",
    "\tmodname=\"${2:genrcx01}\"",
    "\trcxinp=\"${3:\\$pre.newext\\$post}\"",
    "\trcxin2=\"${4:\\$pre.oldext\\$post}\"",
    "\trcxdes=\"${5:suppression}\"",
    "\trcxtyp=\"${6:subtract}\"",
    "\trcxopt=\"${7:c}\"",
    "/>",
    "$0"
  ],
  "description": "compare files example\n\nCreates a reconciliation file from an extract record formatted file, or the comparison of two extract record formatted files."
},

"genreo01_0": {
  "prefix": "genreo01",
  "body": [
    "<module",
    "\tname=\"${1:reorder_pages}\"",
    "\tmodname=\"${2:genreo01}\"",
    "\treoinp=\"${3:\\$loop_dir_curfile}\"",
    "\treotyp=\"${4:r}\"",
    "/>",
    "$0"
  ],
  "description": "UNIX Module Call\n\nReorder pages within documents. Orders include reverse pagination and imposition"
},

"genres01_0": {
  "prefix": "genres01",
  "body": [
    "<module",
    "\tname=\"${1:embed_resources}\"",
    "\tmodname=\"${2:genres01}\"",
    "\tresinp=\"${3:\\$pre.\\${outmask\\}*}\"",
    "\tresout=\"${4:\\$pre.\\${outmask\\}*}\"",
    "\tresdir1=\"${5:\\${usrparms\\}}\"",
    "\tresdir2=\"${6:/bcs/crawford/resources/afp/}\"",
    "/>",
    "$0"
  ],
  "description": "Common example:\n\n(04r07a+) Embeds all resources into AFP & Metacode printstreams."
},

"genres01_1": {
  "prefix": "genres01",
  "body": [
    "<module",
    "\tname=\"${1:embed_resources}\"",
    "\tmodname=\"${2:genres01}\"",
    "\tresinp=\"${3:\\$pre.\\${outmask\\}*}\"",
    "\tresout=\"${4:\\$pre.\\${outmask\\}*}\"",
    "\tresdir1=\"${5:\\${usrparms\\}}\"",
    "\tresdir2=\"${6:/bcs/crawford/resources/afp/}\"",
    "\tres_formdef=\"${7:F1DUPLEX}\"",
    "/>",
    "$0"
  ],
  "description": "External formdef example:\n\n(04r07a+) Embeds all resources into AFP & Metacode printstreams."
},

"genret01_0": {
  "prefix": "genret01",
  "body": [
    "<module",
    "\tstepname=\"${1:genret01}\"",
    "\tmodname=\"${2:genret01}\"",
    "\tretfil=\"${3:\\$runpath}\"",
    "\tretlvl=\"${4:warning}\"",
    "/>",
    "$0"
  ],
  "description": "genret01 example:\n\nThis module is used to retrieve files listed in the arcrep variable from either an existing run directory or from the site archive for the purpose of recreating a damaged pieces print file. This is called directly from the genmis01 module."
},

"genrmd01_0": {
  "prefix": "genrmd01",
  "body": [
    "<module",
    "\tstepname=\"${1:genrmd01}\"",
    "\tmodname=\"${2:genrmd01}\"",
    "\trmddir=\"${3:\\${runpath\\}}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "genrmd01 example:\n\nRemove (delete) a directory."
},

"gensel01_0": {
  "prefix": "gensel01",
  "body": [
    "<module",
    "\tname=\"${1:select_records}\"",
    "\tmodname=\"${2:gensel01}\"",
    "\tselinp=\"${3:\\$pre.repext\\$post}\"",
    "\tsellst=\"${4:\\$pre.miss01v1}\"",
    "/>",
    "$0"
  ],
  "description": "gensel01 example\n\nReads a list of control numbers for documents damaged or lost in production that need to be recovered. It selects the production extract record for each control number."
},

"gensft01_0": {
  "prefix": "gensft01",
  "body": [
    "<module",
    "\tstepname=\"${1:gensft01}\"",
    "\tmodname=\"${2:gensft01}\"",
    "\tsfthst=\"${3:172.27.12.200}\"",
    "\tsftusr=\"${4:lpdaw1}\"",
    "\tsftpas=\"${5:12345678}\"",
    "\tsftfil=\"${6:\\$pre.c\\$c\\$\\\\batout.txt}\"",
    "\tsftout=\"${7:'\\$FFILE\\$\\\\.C\\$c\\$\\\\.BATOUT}\"",
    "/>",
    "$0"
  ],
  "description": "gensft01 example\n\nSecureFTP a file"
},

"gensla01_0": {
  "prefix": "gensla01",
  "body": [
    "<module",
    "\tstepname=\"${1:gensla01}\"",
    "\tmodname=\"${2:gensla01}\"",
    "\tsladay=\"${3:1}\"",
    "\tslahour=\"${4:6}\"",
    "\tslafmt=\"${5:%05d:%04d}\"",
    "\tslavar=\"${6:\\$day, \\$year}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "<assign",
    "\tname=\"${8:assign_mdate}\"",
    "\tmdate=\"${9:\\$sladate}\"",
    "\tdisable=\"${10:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example 1: This uses a 1 day and 6 hours sla and updates the mdate for epic in a assign statement.\n\nModule for generating Service Level Agreement times and dates."
},

"gensla01_1": {
  "prefix": "gensla01",
  "body": [
    "<module",
    "\tstepname=\"${1:gensla01}\"",
    "\tmodname=\"${2:gensla01}\"",
    "\tslahour=\"${3:30}\"",
    "\tslafmt=\"${4:%05d:%04d}\"",
    "\tslavar=\"${5:\\$day, \\$year}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "<assign",
    "\tname=\"${7:assign_mdate}\"",
    "\tmdate=\"${8:\\$sladate}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example 2: It could also be coded as\n\nModule for generating Service Level Agreement times and dates."
},

"gensolcat01_0": {
  "prefix": "gensolcat01",
  "body": [
    "<module",
    "\tname=\"${1:remote_solimar_concat}\"",
    "\tmodname=\"${2:gensolcat01}\"",
    "\tsolcat_in=\"${3:\\${runpath\\}*.pdf}\"",
    "\tsolcat_out_pdf=\"${4:\\${pre\\}.solimar_concat.pdf}\"",
    "\twatmax=\"${5:36000}\"",
    "\twatfound=\"${6:300}\"",
    "\twatbuild=\"${7:10}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "filemask with .pdf extension\n\nConcatenate/Normalize PDF files using remote Solimar"
},

"gensolcat01_1": {
  "prefix": "gensolcat01",
  "body": [
    "<module",
    "\tname=\"${1:remote_solimar_concat}\"",
    "\tmodname=\"${2:gensolcat01}\"",
    "\tsolcat_in=\"${3:\\${runpath\\}input1.pdf,\\${runpath\\}input2.pdf,\\${runpath\\}input3.pdf}\"",
    "\tsolcat_out_pdf=\"${4:\\${pre\\}.solimar_concat.pdf}\"",
    "\twatmax=\"${5:36000}\"",
    "\twatfound=\"${6:300}\"",
    "\twatbuild=\"${7:10}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "comma separated PDF files\n\nConcatenate/Normalize PDF files using remote Solimar"
},

"gensolcat01_2": {
  "prefix": "gensolcat01",
  "body": [
    "<module",
    "\tname=\"${1:remote_solimar_concat}\"",
    "\tmodname=\"${2:gensolcat01}\"",
    "\tsolcat_in=\"${3:\\${runpath\\}solimar_input.zip}\"",
    "\tsolcat_out_pdf=\"${4:\\${pre\\}.solimar_concat.pdf}\"",
    "\twatmax=\"${5:36000}\"",
    "\twatfound=\"${6:300}\"",
    "\twatbuild=\"${7:10}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "zip file with all the PDF files. (It is expected that the PDF files inside the zip file would have the .pdf extension)\n\nConcatenate/Normalize PDF files using remote Solimar"
},

"gensrr01_0": {
  "prefix": "gensrr01",
  "body": [
    "<module",
    "\tstepname=\"${1:gensrr01}\"",
    "\tmodname=\"${2:gensrr01}\"",
    "\tsrrinp=\"${3:\\${pre\\}.psafxxxx.c0200.cr000}\"",
    "\tsrrres=\"${4:\\$usrparms\\$\\\\postscript.ps}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "gensrr01 example:\n\nReduce the resources to a manageable file for the Solimar Postscript option."
},

"gensrt01_0": {
  "prefix": "gensrt01",
  "body": [
    "<module",
    "\tname=\"${1:sort}\"",
    "\tmodname=\"${2:gensrt01}\"",
    "\tsrtinp=\"${3:\\$pre.repext\\$post}\"",
    "\tsrtout=\"${4:\\$pre.repsrt\\$post}\"",
    "\tsrtele=\"${5:SORT_ME}\"",
    "/>",
    "$0"
  ],
  "description": "gensrt01 example\n\nSort, split, filter, report on, and/or reformat data, flag audits, etc."
},

"gentpl01_0": {
  "prefix": "gentpl01",
  "body": [
    "<module",
    "\tname=\"${1:tapeless}\"",
    "\tmodname=\"${2:gentpl01}\"",
    "\ttpllst=\"${3:\\$pre.outlst\\$post}\"",
    "\ttplpri=\"${4:com}\"",
    "/>",
    "$0"
  ],
  "description": "gentpl01 example:\n\nThe tapeless macro module is designed to give a simple interface to tapeless processing. By including the module below in your control file and setting the values of the variables, you will be able to: Logan & St. Charles: send the filelist file to the correct host system which will in turn ask for the printfiles from the remote system. Thurmont, Nashville, Hyde Park, West Caudwell & Windsor: send the files in the filelist to the correct host system"
},

"gentpl01_1": {
  "prefix": "gentpl01",
  "body": [
    "<module",
    "\tname=\"${1:tapeless_\\$batchid\\$c}\"",
    "\tmodname=\"${2:gentpl01}\"",
    "\ttplsuf=\"${3:.\\$date}\"",
    "\ttplext=\"${4:.afp}\"",
    "\ttpllst=\"${5:\\$pre.outlst\\$post}\"",
    "\ttplpri=\"${6:com}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "Lewisville example:\n\nThe tapeless macro module is designed to give a simple interface to tapeless processing. By including the module below in your control file and setting the values of the variables, you will be able to: Logan & St. Charles: send the filelist file to the correct host system which will in turn ask for the printfiles from the remote system. Thurmont, Nashville, Hyde Park, West Caudwell & Windsor: send the files in the filelist to the correct host system"
},

"gentrn01_0": {
  "prefix": "gentrn01",
  "body": [
    "<module",
    "\tstepname=\"${1:transformation}\"",
    "\tmodname=\"${2:gentrn01}\"",
    "\ttrninp=\"${3:\\$pre.output\\$post}\"",
    "/>",
    "$0"
  ],
  "description": "Simple Example:\n\nTransforms a printstream. This involves transforming an AFP, Metacode or Postscript printstream into PDF. Bookmarking of the final output PDF may be done optionally. Transform of PDF to AFP is now an option, also. NOTE: For trnini and trncfg there are global configuration and/or initialization files that should work in most cases. If they don't work, you can customize and change the global path/filename to make the necessary modifications."
},

"gentrn01_1": {
  "prefix": "gentrn01",
  "body": [
    "<module",
    "\tname=\"${1:transform AFP Crawford}\"",
    "\tmodname=\"${2:gentrn01}\"",
    "\ttrninp=\"${3:\\$runpath\\$\\\\thut.fin.boa7779.stmt.afnoxxxx.c06xx.cr01}\"",
    "\ttrnout=\"${4:\\$runpath\\$\\\\thut.fin.boa7779.stmt.afnoxxxx.c06xx.cr01.pdf}\"",
    "\ttrnini=\"${5:/bcs/crawford/global_ini/global.afpd.ini}\"",
    "\ttrntyp=\"${6:e}\"",
    "\tdata_type=\"${7:afp}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "Transform AFP Crawford\n\nTransforms a printstream. This involves transforming an AFP, Metacode or Postscript printstream into PDF. Bookmarking of the final output PDF may be done optionally. Transform of PDF to AFP is now an option, also. NOTE: For trnini and trncfg there are global configuration and/or initialization files that should work in most cases. If they don't work, you can customize and change the global path/filename to make the necessary modifications."
},

"gentrn01_2": {
  "prefix": "gentrn01",
  "body": [
    "<module",
    "\tname=\"${1:transform Metacode Crawford}\"",
    "\tmodname=\"${2:gentrn01}\"",
    "\ttrninp=\"${3:\\$runpath\\$\\\\chgp.ins.cmg7018.mort.menmxxxx.c01xx.cr01}\"",
    "\ttrnout=\"${4:\\$runpath\\$\\\\chgp.ins.cmg7018.mort.menmxxxx.c01xx.cr01.pdf}\"",
    "\ttrnvar=\"${5:-JSLPATH=/bcs/chg\\$lvl/clientapp/cmgmort/parm:/apps/ctipro/xrxres/xrxjsl -JDL=EXSJSL -JDE=EXSJDE}\"",
    "\ttrntyp=\"${6:e}\"",
    "\ttrnini=\"${7:/bcs/crawford/global_ini/global.mepd.ini}\"",
    "\tdata_type=\"${8:met}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "Transform Metacode Crawford\n\nTransforms a printstream. This involves transforming an AFP, Metacode or Postscript printstream into PDF. Bookmarking of the final output PDF may be done optionally. Transform of PDF to AFP is now an option, also. NOTE: For trnini and trncfg there are global configuration and/or initialization files that should work in most cases. If they don't work, you can customize and change the global path/filename to make the necessary modifications."
},

"gentrn01_3": {
  "prefix": "gentrn01",
  "body": [
    "<module",
    "\tmodname=\"${1:gentrn01}\"",
    "\tname=\"${2:transform_Solimar_linedata2PDF}\"",
    "\ttrntyp=\"${3:o}\"",
    "\ttrnsite=\"${4:rrd}\"",
    "\ttrnSolimar=\"${5:txpdxxxx}\"",
    "\ttrninp=\"${6:\\${usrinputs\\}lgnt.yes.com0328.yoiw.auditcgt.stdrpt01}\"",
    "\tdata_type=\"${7:lcds}\"",
    "\tdata_type_out=\"${8:pdf}\"",
    "\tonerror_filenotconverted=\"${9:die_and_cleanup_files}\"",
    "\tdisable=\"${10:n}\"",
    "/>",
    "$0"
  ],
  "description": "Transform_Solimar_linedata to PDF\n\nTransforms a printstream. This involves transforming an AFP, Metacode or Postscript printstream into PDF. Bookmarking of the final output PDF may be done optionally. Transform of PDF to AFP is now an option, also. NOTE: For trnini and trncfg there are global configuration and/or initialization files that should work in most cases. If they don't work, you can customize and change the global path/filename to make the necessary modifications."
},

"genttp01_0": {
  "prefix": "genttp01",
  "body": [
    "<module",
    "\tname=\"${1:genttp}\"",
    "\tmodname=\"${2:genttp01}\"",
    "\tttpinp=\"${3:\\$pre.inimg\\$post}\"",
    "\tttpout=\"${4:\\$pre.ttpout\\$post.ps}\"",
    "\tttppdf=\"${5:y}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "genttp01 example\n\nText to PostScript or PDF"
},

"genuserqual01_0": {
  "prefix": "genuserqual01",
  "body": [
    "<module",
    "\tname=\"${1:create_user_quality}\"",
    "\tmodname=\"${2:genuserqual01}\"",
    "\tuserqualin=\"${3:\\$pre.catout\\$post}\"",
    "\tuserqualout=\"${4:\\$pre.myconcat_quality\\$post}\"",
    "\tuserqualcat=\"${5:y}\"",
    "\tuserqualflag=\"${6:184}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "This example overrides all of the defaults of the module and will select the 184th extract record as the user specified quality record. It will perform automatic concatenation and will put the newly created user quality record at the top of the output file ($pre.myconcat_quality$post).\n\nThis module is used to variably select a record from an extract file (using userqualflag) to be used as the make-ready and intermittent z/quality record(s). Use this module if you need a particular type of record to be used for your Quality records. This module should be used in conjunction with quality_user_records=\"b\" in the <quality...> element. It will place a 'Y' in position 1523 of the resulting user quality extract record. (Available in v04r10c+.)"
},

"genuserqual01_1": {
  "prefix": "genuserqual01",
  "body": [
    "<module",
    "\tname=\"${1:create_user_quality}\"",
    "\tmodname=\"${2:genuserqual01}\"",
    "\tuserqualin=\"${3:\\$pre.extrac01_all\\$post}\"",
    "\tuserqualflag=\"${4:2217:B13H|900H}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "This example overrides the input and selection attributes. It will default to userqualcat=\"y\" and will therefore default the userqualout attribute/filename to $pre.userqual.concat$post. This will select the FIRST RECORD ONLY that has B13H or 900H at position 2217 of the extract record.\n\nThis module is used to variably select a record from an extract file (using userqualflag) to be used as the make-ready and intermittent z/quality record(s). Use this module if you need a particular type of record to be used for your Quality records. This module should be used in conjunction with quality_user_records=\"b\" in the <quality...> element. It will place a 'Y' in position 1523 of the resulting user quality extract record. (Available in v04r10c+.)"
},

"genuzp01_0": {
  "prefix": "genuzp01",
  "body": [
    "<module",
    "\tname=\"${1:unzip}\"",
    "\tmodname=\"${2:genuzp01}\"",
    "\tuzpname=\"${3:\\${rundir\\}input.zip}\"",
    "/>",
    "$0"
  ],
  "description": "Single zip file example:\n\nunzip files"
},

"genuzp01_1": {
  "prefix": "genuzp01",
  "body": [
    "<loop",
    "\tloop_dir=\"${1:\\$usrinputs}\"",
    "\tloop_filemask=\"${2:*op.zip}\"",
    ">",
    "\t<module",
    "\t\tname=\"${3:unzip file from Anchor}\"",
    "\t\tmodname=\"${4:genuzp01}\"",
    "\t\tuzpname=\"${5:\\$loop_dir_curfile}\"",
    "\t\tuzpfiles=\"${6:*op.txt}\"",
    "\t\tdisable=\"${7:n}\"",
    "\t/>",
    "</loop>",
    "$0"
  ],
  "description": "Multiple zip file example:\n\nunzip files"
},

"genvmv01_0": {
  "prefix": "genvmv01",
  "body": [
    "<module",
    "\tname=\"${1:verimove}\"",
    "\tmodname=\"${2:genvmv01}\"",
    "\tvmvinp=\"${3:\\$pre.extrac\\$post}\"",
    "\tvmvid=\"${4:AMB}\"",
    "\tvmvwat=\"${5:y}\"",
    "/>",
    "$0"
  ],
  "description": "Verimove example:\n\nVerimove processing including conversion of the input file to verimove format, transmission of the file to the verimove server, and waiting for the return of the verimove report and output files. Note: This module will flag all records marked with updates with a pull code of \"V\". Pull codes are part of the extra mailsort criteria so they can be identified as a group."
},

"genvmv02_0": {
  "prefix": "genvmv02",
  "body": [
    "<module",
    "\tname=\"${1:verimove}\"",
    "\tmodname=\"${2:genvmv02}\"",
    "\tvmvinp=\"${3:\\$pre.extrac\\$post}\"",
    "\tvmvid=\"${4:AMB}\"",
    "\tvmvwat=\"${5:y}\"",
    "\tvmv_land=\"${6:main}\"",
    "/>",
    "$0"
  ],
  "description": "Verimove example:\n\nVerimove processing including conversion of the input file to verimove format, transmission of the file to the verimove server, and waiting for the return of the verimove report and output files. Note: This module will flag all records marked with updates with a pull code of \"V\". Pull codes are part of the extra mailsort criteria so they can be identified as a group."
},

"genwat01_0": {
  "prefix": "genwat01",
  "body": [
    "<module",
    "\tname=\"${1:wait}\"",
    "\tmodname=\"${2:genwat01}\"",
    "\twatdir=\"${3:\\$runpath}\"",
    "\twatfil=\"${4:\\$pre.catout\\$post}\"",
    "\tonerror_maxtimerexpired=\"${5:no_files_received_process}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "genwat01 example:\n\nWaits for a file that meets a user-defined file in a user-defined directory before continuing with the script processing. This is useful for waiting for offline processes to complete."
},

"genwat02_0": {
  "prefix": "genwat02",
  "body": [
    "<module",
    "\tname=\"${1:wait}\"",
    "\tmodname=\"${2:genwat02}\"",
    "\twatdir=\"${3:\\$runpath}\"",
    "\twatfil=\"${4:\\$filename}\"",
    "\twatlist=\"${5:n}\"",
    "\tonerror_maxtimerexpired=\"${6:no_files_received_process}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "genwat02 example:\n\nWaits for a file that meets a user-defined file in a user-defined directory before continuing with the script processing. This is useful for waiting for offline processes to complete."
},

"genwbsrpt01_0": {
  "prefix": "genwbsrpt01",
  "body": [
    "<process",
    "\tname=\"${1:wbsrpt_process}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${3:wbsrpt_split_call}\"",
    "\t\tmodname=\"${4:genwbsrpt01}\"",
    "\t\twbsrptinp=\"${5:\\$infile}\"",
    "\t\twbsrptout=\"${6:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\tdisable=\"${7:n}\"",
    "\t/>",
    "</process>",
    "$0"
  ],
  "description": "basic example\n\nSplits the WBS nightly return report file by client/project code"
},

"genwbsrpt01_1": {
  "prefix": "genwbsrpt01",
  "body": [
    "<process",
    "\tname=\"${1:wbsrpt_process}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${3:wbsrpt_split_call}\"",
    "\t\tmodname=\"${4:genwbsrpt01}\"",
    "\t\twbsrptinp=\"${5:\\$infile}\"",
    "\t\twbsrptout=\"${6:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\tdisable=\"${7:n}\"",
    "\t/>",
    "\t<module",
    "\t\tname=\"${8:wbsrpt_empty_check}\"",
    "\t\tmodname=\"${9:genemp01}\"",
    "\t\tempinp=\"${10:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\tdisable=\"${11:n}\"",
    "\t/>",
    "\t<if",
    "\t\tname=\"${12:if_wbsrpt_empty_check}\"",
    "\t>",
    "\t\t<condition",
    "\t\t\tname=\"${13:condition_wbsrpt_empty_check}\"",
    "\t\t>",
    "\t\t\t<![CDATA[ (\\$emprc == 0) ]]>",
    "\t\t\t<module",
    "\t\t\t\tname=\"${14:wbsrpt_ftp_call}\"",
    "\t\t\t\tmodname=\"${15:genftp01}\"",
    "\t\t\t\tftphst=\"${16:IP_ADDRESS}\"",
    "\t\t\t\tftpusr=\"${17:USER_ID}\"",
    "\t\t\t\tftppas=\"${18:PASSWORD}\"",
    "\t\t\t\tftpcd=\"${19:/Verizon/Exelon/WBS}\"",
    "\t\t\t\tftpfil=\"${20:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\t\t\tftpout=\"${21:\\${ffile\\}.wbsrpt\\${post\\}}\"",
    "\t\t\t\tdisable=\"${22:n}\"",
    "\t\t\t/>",
    "\t\t</condition>",
    "\t</if>",
    "</process>",
    "$0"
  ],
  "description": "FTP example:\n\nSplits the WBS nightly return report file by client/project code"
},

"genwbsrpt01_2": {
  "prefix": "genwbsrpt01",
  "body": [
    "<process",
    "\tname=\"${1:wbsrpt_process}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${3:wbsrpt_split_call}\"",
    "\t\tmodname=\"${4:genwbsrpt01}\"",
    "\t\twbsrptinp=\"${5:\\$infile}\"",
    "\t\twbsrptout=\"${6:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\twbsrpteml=\"${7:y}\"",
    "\t\temlfr=\"${8:FROM\\\\\\\\\\\\@rrd.com}\"",
    "\t\temlto=\"${9:TO\\\\\\\\\\\\@rrd.com}\"",
    "\t\tdisable=\"${10:n}\"",
    "\t/>",
    "\t<module",
    "\t\tname=\"${11:wbsrpt_empty_check}\"",
    "\t\tmodname=\"${12:genemp01}\"",
    "\t\tempinp=\"${13:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\tdisable=\"${14:n}\"",
    "\t/>",
    "\t<if",
    "\t\tname=\"${15:if_wbsrpt_empty_check}\"",
    "\t>",
    "\t\t<condition",
    "\t\t\tname=\"${16:condition_wbsrpt_empty_check}\"",
    "\t\t>",
    "\t\t\t<![CDATA[ (\\$emprc == 0) ]]>",
    "\t\t\t<module",
    "\t\t\t\tname=\"${17:wbsrpt_ftp_call}\"",
    "\t\t\t\tmodname=\"${18:genftp01}\"",
    "\t\t\t\tftphst=\"${19:IP_ADDRESS}\"",
    "\t\t\t\tftpusr=\"${20:USER_ID}\"",
    "\t\t\t\tftppas=\"${21:PASSWORD}\"",
    "\t\t\t\tftpcd=\"${22:/Verizon/Exelon/WBS}\"",
    "\t\t\t\tftpfil=\"${23:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\t\t\tftpout=\"${24:\\${ffile\\}.wbsrpt\\${post\\}}\"",
    "\t\t\t\tdisable=\"${25:n}\"",
    "\t\t\t/>",
    "\t\t</condition>",
    "\t</if>",
    "</process>",
    "$0"
  ],
  "description": "FTP and email notifcation example:\n\nSplits the WBS nightly return report file by client/project code"
},

"genwbsrpt01_3": {
  "prefix": "genwbsrpt01",
  "body": [
    "<process",
    "\tname=\"${1:wbsrpt_process}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<module",
    "\t\tname=\"${3:wbsrpt_split_call}\"",
    "\t\tmodname=\"${4:genwbsrpt01}\"",
    "\t\twbsrptinp=\"${5:\\$infile}\"",
    "\t\twbsrptout=\"${6:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\twbsrpteml=\"${7:y}\"",
    "\t\temlfr=\"${8:FROM\\\\\\\\\\\\@rrd.com}\"",
    "\t\temlto=\"${9:TO\\\\\\\\\\\\@rrd.com}\"",
    "\t\tonerror_wbsrptempty=\"${10:wbsrpt_empty_process}\"",
    "\t\tdisable=\"${11:n}\"",
    "\t/>",
    "\t<module",
    "\t\tname=\"${12:wbsrpt_empty_check}\"",
    "\t\tmodname=\"${13:genemp01}\"",
    "\t\tempinp=\"${14:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\tdisable=\"${15:n}\"",
    "\t/>",
    "\t<if",
    "\t\tname=\"${16:if_wbsrpt_empty_check}\"",
    "\t>",
    "\t\t<condition",
    "\t\t\tname=\"${17:condition_wbsrpt_empty_check}\"",
    "\t\t>",
    "\t\t\t<![CDATA[ (\\$emprc == 0) ]]>",
    "\t\t\t<module",
    "\t\t\t\tname=\"${18:wbsrpt_ftp_call}\"",
    "\t\t\t\tmodname=\"${19:genftp01}\"",
    "\t\t\t\tftphst=\"${20:IP_ADDRESS}\"",
    "\t\t\t\tftpusr=\"${21:USER_ID}\"",
    "\t\t\t\tftppas=\"${22:PASSWORD}\"",
    "\t\t\t\tftpcd=\"${23:/Verizon/Exelon/WBS}\"",
    "\t\t\t\tftpfil=\"${24:\\${pre\\}.wbsrpt\\${post\\}}\"",
    "\t\t\t\tftpout=\"${25:\\${ffile\\}.wbsrpt\\${post\\}}\"",
    "\t\t\t\tdisable=\"${26:n}\"",
    "\t\t\t/>",
    "\t\t</condition>",
    "\t</if>",
    "</process>",
    "<process",
    "\tname=\"${27:wbsrpt_empty_process}\"",
    "\tdisable=\"${28:n}\"",
    ">",
    "\t<command",
    "\t\tname=\"${29:doing_nothing}\"",
    "\t\tdisable=\"${30:n}\"",
    "\t>",
    "\t\t<![CDATA[\n\t\t\tprint \"I AM NOT DOING ANYTHING HERE!!!\\\\n\";\n\t\t]]>",
    "\t</command>",
    "</process>",
    "$0"
  ],
  "description": "FTP, email notifcation, and onerror call options example:\n\nSplits the WBS nightly return report file by client/project code"
},

"genx2f01_0": {
  "prefix": "genx2f01",
  "body": [
    "<module",
    "\tstepname=\"${1:genx2f01}\"",
    "\tmodname=\"${2:genx2f01}\"",
    "\tx2finp=\"${3:\\$runpath\\$\\\\vpl9999c.xml}\"",
    "/>",
    "$0"
  ],
  "description": "genx2f01 example\n\nConvert XML file to a flat file with fixed field offsets"
},

"genxef01_0": {
  "prefix": "genxef01",
  "body": [
    "<module",
    "\tname=\"${1:tray_calls_xml}\"",
    "\tmodname=\"${2:genxef01}\"",
    "\txefinp=\"${3:\\$pre.\\${outmask\\}*}\"",
    "\txef_type=\"${4:xml}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "genxef01 example\n\nCreates XML/Text based ticket for PDF tray calls. Input files are renamed and output files have the same name as the original input files, but they contain the xml/text job ticket."
},

"genxmt01_0": {
  "prefix": "genxmt01",
  "body": [
    "<module",
    "\tname=\"${1:genxmt01}\"",
    "\tmodname=\"${2:genxmt01}\"",
    "\txmtinp=\"${3:\\$pre.label\\$post}\"",
    "\txmtcfg=\"${4:label}\"",
    "/>",
    "$0"
  ],
  "description": "label sample\n\nRouter for all transmissions."
},

"genxmt01_1": {
  "prefix": "genxmt01",
  "body": [
    "<module",
    "\tname=\"${1:transmit_cdrom_index}\"",
    "\tmodname=\"${2:genxmt01}\"",
    "\txmtinp=\"${3:\\$pre.idxidx\\$post}\"",
    "\txmtout=\"${4:INS\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\$pi\\${n\\}_\\${post\\}_index.txt}\"",
    "\txmtcfg=\"${5:eps}\"",
    "/>",
    "$0"
  ],
  "description": "CD-ROM indexing sample\n\nRouter for all transmissions."
},

"genxmt01_2": {
  "prefix": "genxmt01",
  "body": [
    "<command",
    "\tname=\"${1:add_xmtinfo_table_entry}\"",
    ">",
    "\t<![CDATA[\n\t\t%newxmitinfo = ( 'special' => {\n\t\t\t'transtype' => 'cdproc',\n\t\t\t'procname' => '\\${usrscripts\\}fordcredit.sh',\n\t\t\t'xmtopts' => '',\n\t\t\t'testloc' => '',\n\t\t\t'prodloc' => '',\n\t\t\\});\n\t\t%xmitinfo=(%xmitinfo,%newxmitinfo);\n\t]]>",
    "</command>",
    "<module",
    "\tname=\"${2:transmit_cdrom_index}\"",
    "\tmodname=\"${3:genxmt01}\"",
    "\txmtinp=\"${4:\\$pre.testfile\\$post}\"",
    "\txmtout=\"${5:\\$uppercasefilename}\"",
    "\txmtvalue=\"${6:special}\"",
    "\txmtarc=\"${7:n}\"",
    "\txmtmon=\"${8:y}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "Expanding the xmitinfo hash table to include your Connect::Direct script to get Powerstream error handling\n\nRouter for all transmissions."
},

"genxmt01_3": {
  "prefix": "genxmt01",
  "body": [
    "<command",
    "\tname=\"${1:add_xmtinfo_table_entry_for_\\${loop_curline\\}}\"",
    "\tdisable=\"${2:t}\"",
    ">",
    "\t<![CDATA[\n\t\t%newxmitinfo = ( 'bgeserver' => {\n\t\t\t'transtype' => 'rawcd',\n\t\t\t'procname' => 'BGEARCSEND',\n\t\t\t'runpath' => '\\${runpath\\}',\n\t\t\t'transmode' => 'binary',\n\t\t\t'xlate' => 'no',\n\t\t\t'cd_ksh_file' => 'cdsend\\${pscd_step\\}.ksh',\n\t\t\t'snode' => ' m4000-msw-04',\n\t\t\t'snode_os' => 'unix',\n\t\t\t'snode_opts' => 'y',\n\t\t\\});\n\t\t%xmitinfo=(%xmitinfo,%newxmitinfo);\n\t]]>",
    "</command>",
    "<module",
    "\tname=\"${3:transmit_\\${loop_curline\\}_to_BGE}\"",
    "\tmodname=\"${4:genxmt01}\"",
    "\txmtinp=\"${5:\\${runpath\\}\\$transmit_file}\"",
    "\txmtout=\"${6:/ccbprod/RRDonnelley/inbound/letterimages/bge_ccb_\\${date\\}_file01}\"",
    "\txmtvalue=\"${7:bgeserver}\"",
    "\txmtarc=\"${8:n}\"",
    "\txmtmon=\"${9:n}\"",
    "\tdisable=\"${10:t}\"",
    "/>",
    "$0"
  ],
  "description": "Example using rawcd\n\nRouter for all transmissions."
},

"genxmt01_4": {
  "prefix": "genxmt01",
  "body": [
    "<module",
    "\tname=\"${1:transmit_proof}\"",
    "\tmodname=\"${2:genxmt01}\"",
    "\txmtinp=\"${3:\\$ffile.outpdf\\$c}\"",
    "\txmtout=\"${4:\\\\\\\\\\\\\\\\\\\\Proofs\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\0DevTest\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\proof_of_concept.pdf}\"",
    "\tzxmtout=\"${5:\\\\\\\\\\\\\\\\\\\\YESAFP\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\proof_positive.pdf}\"",
    "\txmtcfg=\"${6:sendg}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example using proofs to EPS: You need to talk with EPS to set up a directory for you to land your files. This is set up for Logan facility only\n\nRouter for all transmissions."
},

"genxmt01_5": {
  "prefix": "genxmt01",
  "body": [
    "<module",
    "\tname=\"${1:send_corpsftp2}\"",
    "\tmodname=\"${2:genxmt01}\"",
    "\txmtinp=\"${3:\\$filename}\"",
    "\txmtout=\"${4:CBStest_BCS000\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\in\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\$filename}\"",
    "\txmtcfg=\"${5:corpsftp2}\"",
    "\txmtarc=\"${6:n}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example using corpsftp2:\n\nRouter for all transmissions."
},

"genxmt01_6": {
  "prefix": "genxmt01",
  "body": [
    "<module",
    "\tname=\"${1:send_corpsftp2}\"",
    "\tmodname=\"${2:genxmt01}\"",
    "\txmtinp=\"${3:\\$pre.extract.all\\${post\\}_BAD}\"",
    "\txmtout=\"${4:CBStest_BCS000\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\in\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\$filename}\"",
    "\txmtcfg=\"${5:corpsftp}\"",
    "\txmtarc=\"${6:n}\"",
    "\txmtmon=\"${7:y}\"",
    "\tonerror_cdsubmitfailed=\"${8:cd_sub_err_process}\"",
    "\tonerror_cdxmitfailed=\"${9:cd_err_process}\"",
    "\tonerror_cdwaittimerpop=\"${10:cd_timer_process}\"",
    "\tdisable=\"${11:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example of all three onerror scenarios (v04r18b+)\n\nRouter for all transmissions."
},

"genxmv01_0": {
  "prefix": "genxmv01",
  "body": [
    "<module",
    "\tstepname=\"${1:genxmv01}\"",
    "\tmodname=\"${2:genxmv01}\"",
    "\txmvinp=\"${3:\\$pre.file.xml}\"",
    "\txmvvar=\"${4:--noout}\"",
    "/>",
    "$0"
  ],
  "description": "genxmv01 example:\n\nValidate XML"
},

"genzip01_0": {
  "prefix": "genzip01",
  "body": [
    "<module",
    "\tname=\"${1:genzip01}\"",
    "\tmodname=\"${2:genzip01}\"",
    "\tzipinp=\"${3:\\$pre.file\\$post}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "genzip01 example:\n\nZip up files"
},

"cal_sla_0": {
  "prefix": "cal_sla",
  "body": [
    "<module",
    "\tstepname=\"${1:cal_sla}\"",
    "\tmodname=\"${2:cal_sla}\"",
    "\tmemo_slaindate=\"${3:Input date to check sla}\"",
    "\tslaindate=\"${4:\\$sladin}\"",
    "\tmemo_slaoutdate=\"${5:output date from check sla}\"",
    "\tslaoutdate=\"\"",
    "\tmemo_sladay=\"${6:The number of days in the sla}\"",
    "\tsladay=\"${7:\\$sladay}\"",
    "\tmemo_slahour=\"${8:The number of hours in the sla}\"",
    "\tslahour=\"${9:\\$slahour}\"",
    "\tmemo_sla=\"${10:The following are holidays or weekends to push the date forward}\"",
    "\tmemo_slawe=\"${11:Weekends}\"",
    "\tslawe=\"${12:Y}\"",
    "\tmemo_slaso=\"${13:Weekends}\"",
    "\tslaso=\"${14:n}\"",
    "\tmemo_slany=\"${15:New Years}\"",
    "\tslany=\"${16:n}\"",
    "\tmemo_slanye=\"${17:New Years Eve}\"",
    "\tslanye=\"${18:n}\"",
    "\tmemo_slamlk=\"${19:Martin Luther King day}\"",
    "\tslamlk=\"${20:n}\"",
    "\tmemo_slapd=\"${21:Presidents day}\"",
    "\tslapd=\"${22:n}\"",
    "\tmemo_slamd=\"${23:Memorial day}\"",
    "\tslamd=\"${24:n}\"",
    "\tmemo_slaid=\"${25:Indepenance day}\"",
    "\tslaid=\"${26:n}\"",
    "\tmemo_slald=\"${27:Labor day}\"",
    "\tslald=\"${28:n}\"",
    "\tmemo_slacld=\"${29:Columbus day}\"",
    "\tslacld=\"${30:n}\"",
    "\tmemo_slavd=\"${31:Veterans day}\"",
    "\tslavd=\"${32:n}\"",
    "\tmemo_slatd=\"${33:Thanksgiving day}\"",
    "\tslatd=\"${34:n}\"",
    "\tmemo_slacre=\"${35:Christmas Eve}\"",
    "\tslacre=\"${36:n}\"",
    "\tmemo_slacrd=\"${37:Christmas day}\"",
    "\tslacrd=\"${38:n}\"",
    "\tdisable=\"${39:n}\"",
    "/>",
    "$0"
  ],
  "description": "cal_sla example:\n\nCalculates the sla date based on weekends and holidays selected."
},

"gpe_deliverdocs_0": {
  "prefix": "gpe_deliverdocs",
  "body": [
    "<module",
    "\tname=\"${1:process_ddr}\"",
    "\tmodname=\"${2:gpe_deliverdocs}\"",
    "\tentry=\"${3:deliver}\"",
    "\tproject_input=\"${4:\\$usrinputs}\"",
    "\toutput_dir=\"${5:\\$runpath}\"",
    "\tenable_dbr=\"${6:n}\"",
    "\tda_xml=\"${7:\\$pre.delivery.accounts\\$post.xml}\"",
    "\tpdf_dir=\"${8:\\${runpath\\}pdfs/}\"",
    "\tvmr_xml=\"${9:\\${runpath\\}VerifyMatchResult.xml}\"",
    "\tdisable=\"${10:n}\"",
    "/>",
    "$0"
  ],
  "description": "Document delivery via the gpe_deliverdocs module. Only da_xml, pdf_dir & vmr_xml are required. The other options are set to match the module defaults.\n\nThis module is the second part of RRD's 2-part implementation or interface with the (presently named) \"Pony Express\" service. It performs 2 main tasks: Deliver user statements and Update (replace or append) user statements. Results (successful or otherwise) for the aforementioned tasks are NOT returned from the service right away. Thus the four entry points as described below are designed to be ran independent of one another. The first part of this interface implementation is the gpe_prematch module"
},

"gpe_deliverdocs_1": {
  "prefix": "gpe_deliverdocs",
  "body": [
    "<module",
    "\tname=\"${1:create_dd}\"",
    "\tmodname=\"${2:gpe_deliverdocs}\"",
    "\tdisable=\"${3:n}\"",
    "\tda_xml=\"${4:\\${runpath\\}DeliveryAccounts.xml}\"",
    "\tpdf_dir=\"${5:pdfs\\\\/}\"",
    "\tenable_dbr=\"${6:y}\"",
    "\tdrtxmit=\"${7:\\$drt_xmit}\"",
    "\tdrtste=\"${8:L}\"",
    "\tentry=\"${9:deliver}\"",
    "\tdrtlvl=\"${10:\\$lvli}\"",
    "/>",
    "$0"
  ],
  "description": "This example shows how you might code for Document Delivery with Database Reporting features enabled. Notice that a relative path for pdf_dir will work if the specified path exists in $runpath (which is where appdriver should be processing unless changed by the programmer).\n\nThis module is the second part of RRD's 2-part implementation or interface with the (presently named) \"Pony Express\" service. It performs 2 main tasks: Deliver user statements and Update (replace or append) user statements. Results (successful or otherwise) for the aforementioned tasks are NOT returned from the service right away. Thus the four entry points as described below are designed to be ran independent of one another. The first part of this interface implementation is the gpe_prematch module"
},

"gpe_deliverdocs_2": {
  "prefix": "gpe_deliverdocs",
  "body": [
    "<module",
    "\tname=\"${1:process_ddr}\"",
    "\tmodname=\"${2:gpe_deliverdocs}\"",
    "\tentry=\"${3:deliver_verify}\"",
    "\tddr_file=\"${4:\\$infile}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "This example shows the setup for Delivery verification processing. This processes the DeliverDocumentsResult XML (ddr_xml) received from \"Pony Express\" and produces a billing report in plain text format.\n\nThis module is the second part of RRD's 2-part implementation or interface with the (presently named) \"Pony Express\" service. It performs 2 main tasks: Deliver user statements and Update (replace or append) user statements. Results (successful or otherwise) for the aforementioned tasks are NOT returned from the service right away. Thus the four entry points as described below are designed to be ran independent of one another. The first part of this interface implementation is the gpe_prematch module"
},

"gpe_prematch_0": {
  "prefix": "gpe_prematch",
  "body": [
    "<!-- Full Pony Express encryption and matching -->",
    "<module",
    "\tname=\"${1:gpe_prematch_step}\"",
    "\tmodname=\"${2:gpe_prematch}\"",
    "\tmode=\"${3:wait}\"",
    "\tentry=\"${4:encrypt}\"",
    "\tprematch_xml=\"${5:\\$pre.prematch_input\\$post.xml}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "Standard all-in-one encryption, pre_match & match_verify WITHOUT Database Reporting or Extract file updates. The final output XML that you would use going forward is VerifyMatchResult.xml.\n\nDescription: This module is one part of RRD's 2-part implementation or interface with the (presently named) \"Pony Express\" service. It performs 3 tasks: Encrypt client data (encrypt), find data Intersection with the \"Pony Express\" dataset (pre_match), Verify preliminary matches for final delivery (match_verify). The second part of this interface implementation is the gpe_deliverdocs module."
},

"gpe_prematch_1": {
  "prefix": "gpe_prematch",
  "body": [
    "<!-- Full Pony Express encryption & match with database reporting enabled. (See the gendrt03 module page: http://lglxos07.rrd.com/appdev/wiki/PowerStreamGendrt03.) -->",
    "<module",
    "\tname=\"${1:gpe_prematch_step}\"",
    "\tmodname=\"${2:gpe_prematch}\"",
    "\tmode=\"${3:stop}\"",
    "\tentry=\"${4:encrypt}\"",
    "\tprematch_xml=\"${5:\\$pre.prematch_input\\$post.xml}\"",
    "\tenable_dbr=\"${6:y}\"",
    "\tdrtxmit=\"${7:y}\"",
    "\tdrtste=\"${8:S}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "Encryption ONLY, WITH Database Reporting enabled.\n\nDescription: This module is one part of RRD's 2-part implementation or interface with the (presently named) \"Pony Express\" service. It performs 3 tasks: Encrypt client data (encrypt), find data Intersection with the \"Pony Express\" dataset (pre_match), Verify preliminary matches for final delivery (match_verify). The second part of this interface implementation is the gpe_deliverdocs module."
},

"gpe_prematch_2": {
  "prefix": "gpe_prematch",
  "body": [
    "<module",
    "\tname=\"${1:gpe_prematch_step}\"",
    "\tmodname=\"${2:gpe_prematch}\"",
    "\tmode=\"${3:wait}\"",
    "\tentry=\"${4:pre_match}\"",
    "\tprematch_xml=\"${5:\\$pre.prematch_input\\$post.xml}\"",
    "\tencrypt_results=\"${6:\\${runpath\\}EncryptUsers.uamltrs20151001162603.rrdkey.4.0.zip}\"",
    "\tencrypt_request_id=\"${7:uamltrs20151001162603}\"",
    "\tdry_run=\"${8:y}\"",
    "\tsend_to_prod=\"${9:y}\"",
    "\tdisable=\"${10:n}\"",
    "/>",
    "$0"
  ],
  "description": "With encryption already performed, just run the pre_match and match_verify. The dry_run and send_to_prod flags are enabled, meaning the files will be sent to the Pony Express PROD environment flagged as test files.\n\nDescription: This module is one part of RRD's 2-part implementation or interface with the (presently named) \"Pony Express\" service. It performs 3 tasks: Encrypt client data (encrypt), find data Intersection with the \"Pony Express\" dataset (pre_match), Verify preliminary matches for final delivery (match_verify). The second part of this interface implementation is the gpe_deliverdocs module."
},

"gmc_motor_0": {
  "prefix": "gmc_motor",
  "body": [
    "<!-- Assign variables to make command more legible. -->",
    "<assign",
    "\tname=\"${1:assign_gmc_vars}\"",
    "\tdisable=\"${2:n}\"",
    "\tgmc_Workflow=\"${3:\\${usrparms\\}PowerstreamTest_PSCover.wfd}\"",
    "\tgmc_Infile=\"${4:\\${inwork\\}}\"",
    "\tgmc_Job=\"${5:\\${usrparms\\}PS_CoverPage.job}\"",
    "\tgmc_outfile=\"${6:\\${pre\\}.outpdf}\"",
    "/>",
    "<!-- Then Module call -->",
    "<module",
    "\tname=\"${7:gmc_motor}\"",
    "\tmodname=\"${8:gmc_motor}\"",
    "\tdisable=\"${9:n}\"",
    "\tgmc_cmd=\"${10:\\${gmc_Workflow\\} -d ifXMLDataInput1 \\${gmc_Infile\\} -e PDF -o Output1 -c \\${gmc_Job\\} -useincluded Workflow -f \\${gmc_outfile\\}}\"",
    "\tpowerapp_path=\"${11:/apps/services/powerapps/5.0.0/}\"",
    "/>",
    "$0"
  ],
  "description": "Basic Example:\n\nMakes a call to the lead_pipe to run the GMCMotor powerapp. This will be load balanced and run against the proper GMC-Inspire formatter. GMC messages will be written to the gmc_message_file."
},

"infoshare_feed_0": {
  "prefix": "infoshare_feed",
  "body": [
    "<module",
    "\tname=\"${1:infoshare}\"",
    "\tmodname=\"${2:infoshare_feed}\"",
    "\tinfo_repext=\"${3:\\$pre.repext\\$post}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example module call:\n\nCreates xml piece info and sends it to infoshare (04r13b+)"
},

"list_sort_0": {
  "prefix": "list_sort",
  "body": [
    "<module",
    "\tname=\"${1:firstpass_mailsort_\\$batchid\\$c}\"",
    "\tmodname=\"${2:genmst07}\"",
    "\tdisable=\"${3:n}\"",
    "\tms2psw=\"${4:first}\"",
    "\tmstinp=\"${5:\\${postfile\\}}\"",
    "\tmstatr=\"${6:\\${runpath\\}batat\\$msize.txt}\"",
    "\tmsacsw=\"${7:y}\"",
    "\tmsflgsw=\"${8:n}\"",
    "\tmsinssw=\"${9:n}\"",
    "\tmsembsw=\"${10:n}\"",
    "\tcomment_l1=\"${11:       }\"",
    "\tcomment_l2=\"${12:       }\"",
    "\tmspni=\"${13:y}\"",
    "\tmscpi=\"${14:n}\"",
    "\trelease=\"${15:\\$lvl}\"",
    "/>",
    "<module",
    "\tname=\"${16:list_sort\\${post\\}}\"",
    "\tmodname=\"${17:list_sort}\"",
    "\tdisable=\"${18:n}\"",
    "\tinext=\"${19:\\${pre\\}.c1genb\\${post\\}}\"",
    "\tattr_indicator_start=\"${20:2201}\"",
    "\tattr_indicator_end=\"${21:2202}\"",
    "\tclient_path=\"${22:Powerstream}\"",
    "/>",
    "$0"
  ],
  "description": "CASS Example\n\nThis is an alternative to Group One's Mailsort. Only used if palletized mailings are required."
},

"loadhandshake01_0": {
  "prefix": "loadhandshake01",
  "body": [
    "<process",
    "\tname=\"${1:load_confirm}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<system",
    "\t\tname=\"${3:variable_set}\"",
    "\t\tsystem_variable=\"${4:array1}\"",
    "\t\tsystem_variable_type=\"${5:array}\"",
    "\t\tcommand=\"${6:ls \\${PIVOT_CLIENTID\\}_\\${MSITEC\\}_\\${LVLI3\\}_\\${pivot_transid\\}_\\${date\\}_*_archive_v2_\\${n\\}*.zip}\"",
    "\t\tdisable=\"${7:n}\"",
    "\t/>",
    "\t<command",
    "\t\tstepname=\"${8:create_list}\"",
    "\t\tdisable=\"${9:n}\"",
    "\t>",
    "\t\t<![CDATA[\n\t\t\t\tprint \"Creating load list.\\\\n\";\n\t\t\t\tprint \"loadlist = @array1\\\\n\"; \n\t\t\t\t\\$myloadlist = \"\";\n\t\t\t\tforeach \\$val (@array1){\n\t\t\t\t\tchomp \\$val;\n\t\t\t\t\t\\$myloadlist .= \\$val . \",\";\n\t\t\t\t\\}\n\t\t\t\tchop \\$myloadlist;\n\t\t\t]]>",
    "\t</command>",
    "\t<module",
    "\t\tname=\"${10:loadhandshake01}\"",
    "\t\tmodname=\"${11:loadhandshake01}\"",
    "\t\tloaddir=\"${12:/bcs/\\$site\\$lvl/input/}\"",
    "\t\tloadlist=\"${13:\\$myloadlist}\"",
    "\t\tdisable=\"${14:n}\"",
    "\t/>",
    "</process>",
    "$0"
  ],
  "description": "loadhandshake01 example:\n\nChecks for the return files from Pivot processes and emails results of the load process in Pivot."
},

"msgpoint_0": {
  "prefix": "msgpoint",
  "body": [
    "<module",
    "\tname=\"${1:message_point}\"",
    "\tmodname=\"${2:msgpoint}\"",
    "\tmsgpoint_version=\"${3:server_R1_2016}\"",
    "\ttouchpoint=\"${4:henp}\"",
    "\tdriverFIL=\"${5:\\$pre.conv01}\"",
    "\tmp_ref=\"${6:\\${pjtpath\\}parm/provider_seg_ids.csv}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "msgpoint example:\n\nMessage Point - Interface to Prinova Message Docs."
},

"mtselect_0": {
  "prefix": "mtselect",
  "body": [
    "<module",
    "\tname=\"${1:mtselect_call}\"",
    "\tmodname=\"${2:mtselect}\"",
    "\tcmdinp=\"${3:\\$command_file}\"",
    "\tdatinp=\"${4:\\$data_file}\"",
    "\tformat=\"${5:zip}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "mtselect example:\n\nSend and receive address data between Powerstream and Grayhair Software"
},

"ordernumcheck01_0": {
  "prefix": "ordernumcheck01",
  "body": [
    "<module",
    "\tstepname=\"${1:ordernumcheck01}\"",
    "\tmodname=\"${2:ordernumcheck01}\"",
    "\tonceml=\"${3:y}\"",
    "\toncmax=\"${4:5}\"",
    "\temlto=\"${5:david.williams-logan\\\\\\\\\\\\@rrd.com}\"",
    "\temlfr=\"${6:david.williams-logan\\\\\\\\\\\\@rrd.com}\"",
    "/>",
    "$0"
  ],
  "description": "ordernumcheck01 example:\n\nCheck to see how many available order numbers are left in the order_epic file. Email if below certain number. (Used with auto order number processing only)"
},

"pa_ingestion_0": {
  "prefix": "pa_ingestion",
  "body": [
    "<module",
    "\tstepname=\"${1:make_match_file}\"",
    "\tmodname=\"${2:pa_ingestion}\"",
    "\tcompanion_file=\"${3:\\${runpath\\}pdfs/DTL_0000424948s.txt}\"",
    "\toutput_file=\"${4:\\${runpath\\}match_file.txt}\"",
    "/>",
    "$0"
  ],
  "description": "Simple Example:\n\nRead a companion file from Pivot Architect. Validate the file, and extract the address information into a columnar file genmat01 can use to put the addresses in the extract file."
},

"pa_ingestion_1": {
  "prefix": "pa_ingestion",
  "body": [
    "<!-- make a directory to dump the input PDFs -->",
    "<command",
    "\tstepname=\"${1:make_pdf_dir}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<![CDATA[\n\t\t\tprint \"checking for \\${runpath\\}pdfs: \";\n\t\t\tif ( !( -d \"\\${runpath\\}pdfs\" ) ) {\n\t\t\t\tprint \"making directory\\\\n\";\n\t\t\t\tmkdir \"\\${runpath\\}pdfs\";\n\t\t\t\\}\n\t\t\telse {\n\t\t\t\tprint \"Directory already exists, skipping mkdir.\\\\n\";\n\t\t\t\\}\n\t\t]]>",
    "</command>",
    "<module",
    "\tname=\"${3:unzip}\"",
    "\tmodname=\"${4:genuzp01}\"",
    "\tuzpname=\"${5:\\$infile}\"",
    "\tuzpdir=\"${6:\\${runpath\\}pdfs}\"",
    "/>",
    "$0"
  ],
  "description": "Move Pivot Architect files into run directory:\n\nRead a companion file from Pivot Architect. Validate the file, and extract the address information into a columnar file genmat01 can use to put the addresses in the extract file."
},

"pa_ingestion_2": {
  "prefix": "pa_ingestion",
  "body": [
    "<module",
    "\tstepname=\"${1:clean_up_old_match_file}\"",
    "\tmodname=\"${2:gendel01}\"",
    "\tdelinp=\"${3:match_file.txt}\"",
    "/>",
    "<loop",
    "\tname=\"${4:group_pdfs}\"",
    "\tdisable=\"${5:n}\"",
    "\tloop_dir=\"${6:\\${runpath\\}pdfs/}\"",
    "\tloop_dirout=\"${7:\\${runpath\\}}\"",
    "\tloop_filemask=\"${8:*.txt}\"",
    ">",
    "\t<module",
    "\t\tstepname=\"${9:make_match_file}\"",
    "\t\tmodname=\"${10:pa_ingestion}\"",
    "\t\tcompanion_file=\"${11:\\$loop_dir_curfile}\"",
    "\t\toutput_file=\"${12:\\${runpath\\}match_file.txt}\"",
    "\t/>",
    "</loop>",
    "$0"
  ],
  "description": "Run the pa_ingestion module\n\nRead a companion file from Pivot Architect. Validate the file, and extract the address information into a columnar file genmat01 can use to put the addresses in the extract file."
},

"pa_ingestion_3": {
  "prefix": "pa_ingestion",
  "body": [
    "<command",
    "\tstepname=\"${1:generate_lists}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<![CDATA[\n\t\t\t\\$ptkinp = \"\";\n\t\t\tmy @pdf_names_list = <\\${runpath\\}pdfs/*.pdf>;\n\t\t\t# Turn the list of pdfs into a list for genptk\n\t\t\t#\n\t\t\tmy \\$list_size = scalar @pdf_names_list;\n\t\t\tprint \"\\$list_size pdf names found.\\\\n\";\n\t\t\tforeach my \\$cur_pdf_name (@pdf_names_list){\n\t\t\t\tprint \"\\${runpath\\}\\$cur_pdf_name\\\\n\";\n\t\t\t\t\\$ptkinp .= \"\\$cur_pdf_name \";\n\t\t\t\\}\n\t\t\tprint \"final ptkinp=\\$ptkinp\\\\n\";\n\t\t]]>",
    "</command>",
    "<module",
    "\tname=\"${3:cat_pdfs}\"",
    "\tmodname=\"${4:genptk01}\"",
    "\tptktyp=\"${5:p}\"",
    "\tptkout=\"${6:\\$pre.pdfcat.pdf}\"",
    "\tptksplit=\"${7:1000}\"",
    "\tptkusr=\"${8:\\$ptkinp}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "Concatenate the PDFs from Pivot Architect\n\nRead a companion file from Pivot Architect. Validate the file, and extract the address information into a columnar file genmat01 can use to put the addresses in the extract file."
},

"pa_ingestion_4": {
  "prefix": "pa_ingestion",
  "body": [
    "<loop",
    "\tname=\"${1:extract_loop}\"",
    "\tdisable=\"${2:n}\"",
    "\tloop_dir=\"${3:\\$runpath}\"",
    "\tloop_process_save_log=\"${4:n}\"",
    "\tloop_filemask=\"${5:*pdfcat*.pdf}\"",
    ">",
    "\t<module",
    "\t\tname=\"${6:extract}\"",
    "\t\tdisable=\"${7:n}\"",
    "\t\tmodname=\"${8:genext01}\"",
    "\t\textinp=\"${9:\\$loop_dir_curfile}\"",
    "\t\textrac=\"${10:\\$pre.extrac\\$loop_counter2}\"",
    "\t\textrcn=\"${11:\\${pre\\}.extrcn\\${loop_counter2\\}}\"",
    "\t\textsto=\"${12:\\$extinp}\"",
    "\t/>",
    "</loop>",
    "<!-- Down in the Printdriver section of the control file: -->",
    "<script",
    "\tname=\"${13:script}\"",
    "\tdisable=\"${14:n}\"",
    ">",
    "\t<extract",
    "\t\tname=\"${15:extract}\"",
    "\t\tdisable=\"${16:n}\"",
    "\t>",
    "\t\t<after_document",
    "\t\t\tname=\"${17:after_document}\"",
    "\t\t\tdisable=\"${18:n}\"",
    "\t\t>",
    "\t\t\t<function",
    "\t\t\t\tname=\"${19:EXTRACT}\"",
    "\t\t\t\tvariable=\"${20:pdf_file_name}\"",
    "\t\t\t\tstart=\"${21:2201}\"",
    "\t\t\t\tlength=\"${22:100}\"",
    "\t\t\t\tcomment=\"${23:name of individual pdf}\"",
    "\t\t\t\tdisable=\"${24:n}\"",
    "\t\t\t/>",
    "\t\t</after_document>",
    "\t</extract>",
    "</script>",
    "$0"
  ],
  "description": "Run genext01 on the concatenated PDFs:\n\nRead a companion file from Pivot Architect. Validate the file, and extract the address information into a columnar file genmat01 can use to put the addresses in the extract file."
},

"pa_ingestion_5": {
  "prefix": "pa_ingestion",
  "body": [
    "<module",
    "\tstepname=\"${1:genmat01}\"",
    "\tmodname=\"${2:genmat01}\"",
    "\tmatele=\"${3:match_files}\"",
    "\tmatlst=\"${4:\\$pre.extrac.combind}\"",
    "\tmatinp=\"${5:\\${runpath\\}match_file.txt}\"",
    "\tmatout=\"${6:\\$pre.matout\\$post}\"",
    "/>",
    "<!-- Down in the Printdriver section of the control file: -->",
    "<SELECT",
    "\tNAME=\"${7:match_files}\"",
    "\tINPUT=\"${8:%%matinp}\"",
    "\tLIST=\"${9:%%matlst}\"",
    "\tOUTPUT=\"${10:%%matout}\"",
    "\tOUTSYS=\"${11:%%matsys}\"",
    "\tFILES_SORTED=\"${12:N}\"",
    "\tEXTRACT_FILE_NUM=\"${13:1}\"",
    "\tERROR_LEVEL=\"${14:0}\"",
    "\tMATCH_KEY=\"${15:key}\"",
    "\tMATCH_TYPE=\"${16:ALPHA}\"",
    ">",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${17:blank}\"",
    "\t\tUSER_START=\"${18:001}\"",
    "\t\tUSER_LENGTH=\"${19:50}\"",
    "\t\tEXTRACT_FIELD=\"${20:NAME_ADDR1}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${21:blank}\"",
    "\t\tUSER_START=\"${22:051}\"",
    "\t\tUSER_LENGTH=\"${23:50}\"",
    "\t\tEXTRACT_FIELD=\"${24:NAME_ADDR2}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${25:company}\"",
    "\t\tUSER_START=\"${26:101}\"",
    "\t\tUSER_LENGTH=\"${27:50}\"",
    "\t\tEXTRACT_FIELD=\"${28:NAME_ADDR3}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${29:client}\"",
    "\t\tUSER_START=\"${30:151}\"",
    "\t\tUSER_LENGTH=\"${31:50}\"",
    "\t\tEXTRACT_FIELD=\"${32:NAME_ADDR4}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${33:shipto1}\"",
    "\t\tUSER_START=\"${34:201}\"",
    "\t\tUSER_LENGTH=\"${35:50}\"",
    "\t\tEXTRACT_FIELD=\"${36:NAME_ADDR5}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${37:shipto2}\"",
    "\t\tUSER_START=\"${38:251}\"",
    "\t\tUSER_LENGTH=\"${39:50}\"",
    "\t\tEXTRACT_FIELD=\"${40:NAME_ADDR6}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${41:city_state_zip}\"",
    "\t\tUSER_START=\"${42:301}\"",
    "\t\tUSER_LENGTH=\"${43:50}\"",
    "\t\tEXTRACT_FIELD=\"${44:NAME_ADDR7}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${45:country}\"",
    "\t\tUSER_START=\"${46:351}\"",
    "\t\tUSER_LENGTH=\"${47:50}\"",
    "\t\tEXTRACT_FIELD=\"${48:NAME_ADDR8}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${49:comp_date}\"",
    "\t\tUSER_START=\"${50:401}\"",
    "\t\tUSER_LENGTH=\"${51:8}\"",
    "\t\tEXTRACT_START=\"${52:1}\"",
    "\t\tEXTRACT_LENGTH=\"${53:8}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${54:key}\"",
    "\t\tUSER_START=\"${55:409}\"",
    "\t\tUSER_LENGTH=\"${56:100}\"",
    "\t\tEXTRACT_FIELD=\"${57:USER_INFO}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${58:user_info}\"",
    "\t\tUSER_START=\"${59:509}\"",
    "\t\tUSER_LENGTH=\"${60:441}\"",
    "\t\tEXTRACT_START=\"${61:2301}\"",
    "\t\tEXTRACT_LENGTH=\"${62:441}\"",
    "\t/>",
    "\t<MATCH_FIELD",
    "\t\tUSER_FIELD=\"${63:hhkey}\"",
    "\t\tUSER_START=\"${64:743}\"",
    "\t\tUSER_LENGTH=\"${65:5}\"",
    "\t\tEXTRACT_FIELD=\"${66:HOUSEHOLD_KEY}\"",
    "\t/>",
    "</SELECT>",
    "$0"
  ],
  "description": "Match the output file from pa_ingestion.pl to the extract file:\n\nRead a companion file from Pivot Architect. Validate the file, and extract the address information into a columnar file genmat01 can use to put the addresses in the extract file."
},

"pdf_normalizer_0": {
  "prefix": "pdf_normalizer",
  "body": [
    "<module",
    "\tname=\"${1:pdf_normalizer}\"",
    "\tmodname=\"${2:pdf_normalizer}\"",
    "\tpdfnorm_overwrite=\"${3:y}\"",
    "\tpdfnorm_filemask=\"${4:\\$loop_curfile}\"",
    "\tpdfnorm_path=\"${5:\\$runpath}\"",
    "\tpdfnorm_type=\"${6:gs}\"",
    "\tpdfnorm_max=\"${7:1}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "pdf_normalizer example:\n\nReprocess pdf's to create a more standard format of pdf. This is built for speed with very little output to the screen."
},

"pdf_norm_parbatch_0": {
  "prefix": "pdf_norm_parbatch",
  "body": [
    "<module",
    "\tname=\"${1:pdf_normalizer}\"",
    "\tmodname=\"${2:pdf_norm_parbatch}\"",
    "\tpdfnorm_overwrite=\"${3:y}\"",
    "\tpdfnorm_filemask=\"${4:*.pdf}\"",
    "\tpdfnorm_path=\"${5:\\$pdfpath}\"",
    "\tpdfnorm_type=\"${6:tk}\"",
    "\tpdftkvers=\"${7:/apps/pdftk_2.01/bin/pdftk}\"",
    "\tdisable=\"${8:n}\"",
    "/>",
    "$0"
  ],
  "description": "Simple transform call utilizing PDFtk. Parbatch is used under the covers and is multi-threaded.\n\nReprocess pdf's to create a more standard format of pdf. This is built for speed with very little output to the screen. Specifically, this module differs from pdf_normalizer because it only includes normalizations that reach out to the Ghostscript servers via sysgsp calls. The pdf_normalizer module makes very ineffecient use of sysgsp. This module relies solely on parbatch optimization to bring reliability and stability to the pdf normalization process."
},

"pdf_page_suppress_0": {
  "prefix": "pdf_page_suppress",
  "body": [
    "<module",
    "\tname=\"${1:pdf_page_suppress}\"",
    "\tmodname=\"${2:pdf_page_suppress}\"",
    "\tpdf_out_repex=\"${3:\\$pre.myrepext\\${post\\}}\"",
    "\tpdf_json=\"${4:\\$pre.myjson\\${post\\}}\"",
    "\tpdf_duplex=\"${5:y}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example module call:\n\nSuppress pages in a pdf."
},

"pdf_to_tiff_0": {
  "prefix": "pdf_to_tiff",
  "body": [
    "<module",
    "\tname=\"${1:pdf_to_tiff}\"",
    "\tmodname=\"${2:pdf_to_tiff}\"",
    "\tpdf_input=\"${3:\\${runpath\\}THUT_MF_HSBC_ESCROW.pdf}\"",
    "\ttiff_output=\"${4:THUT.tiff}\"",
    "\tcompression_type=\"${5:lzw}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "pdf_to_tiff example:\n\nConvert a PDF to a Tiff. Note: The PDfs need to be \"good\" PDFs"
},

"pdf_tool_0": {
  "prefix": "pdf_tool",
  "body": [
    "<module",
    "\tname=\"${1:pdf compress}\"",
    "\tmodname=\"${2:pdf_tool}\"",
    "\tpdf_input=\"${3:nsh\\$lvl.fin.nmb\\$n.arml.outpdfbulk\\$post.pdf}\"",
    "\tpdf_output=\"${4:\\$pre.outpdfbulkcompressed\\$post.pdf}\"",
    "\tpdf_path=\"${5:\\$runpath}\"",
    "\tpdf_function=\"${6:compress}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example of compression\n\nMultivalent tool. Has different options for working with PDF"
},

"pdf_formatter_0": {
  "prefix": "pdf_formatter",
  "body": [
    "<module",
    "\tname=\"${1:pdf formatter}\"",
    "\tmodname=\"${2:pdf_formatter}\"",
    "\tpdf_formatter_input=\"${3:\\$pre.inputpdf\\$post.pdf}\"",
    "\tpdf_formatter_output=\"${4:\\$pre.outpdf\\$post.pdf}\"",
    "\tpdf_formatter_pagerange=\"${5:1-end}\"",
    "\tpdf_formatter_pageselect=\"${6:odd}\"",
    "\tpdf_formatter_pageformat=\"${7:rotate}\"",
    "\tpdf_formatter_options=\"${8:90}\"",
    "\tdisable=\"${9:n}\"",
    "/>",
    "$0"
  ],
  "description": "pdf_formatter example:\n\nCustom tool. Has different options for working with PDF."
},

"pdf_validate01_0": {
  "prefix": "pdf_validate01",
  "body": [
    "<module",
    "\tname=\"${1:pdf validate}\"",
    "\tmodname=\"${2:pdf_validate01}\"",
    "\tpdf_validate_input=\"${3:nsh\\$lvl.fin.nmb\\$n.arml.outpdfbulk\\$post.pdf}\"",
    "\tpdf_validate_level=\"${4:3}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "pdf_validate01 example:\n\nPDF Validation tool. Uses different level of testing"
},

"pivot_0": {
  "prefix": "pivot",
  "body": [
    "<!-- pivot_clientid value should come from pivot/internet team -->",
    "<assign",
    "\tname=\"${1:set_values_pivot_archive}\"",
    "\tpivot_clientid=\"${2:POW1111}\"",
    "\tpivot_transid=\"${3:107}\"",
    "\tpivot_xmitcount=\"${4:#SEQ#}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "<!-- xmtcfg setting should come from pivot/internet team. please check above for other options -->",
    "<module",
    "\tname=\"${6:pivot_archive}\"",
    "\tmodname=\"${7:pivot}\"",
    "\tpivot_run=\"${8:all}\"",
    "\tpivot_type=\"${9:parchv2}\"",
    "\tpivot_ele=\"${10:pivot_archive}\"",
    "\tpivot_idx_in=\"${11:\\$pre.repext\\$post}\"",
    "\tpivot_file_name=\"${12:\\${PIVOT_CLIENTID\\}_\\${MSITEC\\}_\\${LVLI\\}_\\${pivot_transid\\}_\\${date\\}_\\${PIVOT_XMITCOUNT\\}_archive_v2}\"",
    "\tpivot_idx_out=\"${13:\\${runpath\\}\\${pivot_file_name\\}_IDX_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.idx}\"",
    "\tpivot_adt_out=\"${14:\\${runpath\\}\\${pivot_file_name\\}_IDX_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.adt}\"",
    "\tpivot_pdf_name=\"${15:\\${pivot_file_name\\}_IDX_001_PDF_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.pdf}\"",
    "\tpivot_chunk_index=\"${16:y}\"",
    "\tpivot_chunk_qty=\"${17:5000}\"",
    "\tpivot_xmit=\"${18:y}\"",
    "\txmtcfg=\"${19:internet}\"",
    "\tmerge_type=\"${20:parchv2}\"",
    "\tdisable=\"${21:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example - Pivot Archive:\n\nGenerate files for Pivot"
},

"pivot_1": {
  "prefix": "pivot",
  "body": [
    "<genindexer",
    "\tname=\"${1:pivot_archive}\"",
    "\tindex_type=\"${2:%%pivot_type}\"",
    "\tinext=\"${3:%%pivot_idx_in}\"",
    "\toutpvtidx=\"${4:%%pivot_idx_out}\"",
    "\toutpvtadt=\"${5:%%pivot_adt_out}\"",
    "\tchunk_index=\"${6:%%pivot_chunk_index}\"",
    "\tpivot_client_app_id=\"${7:%%PIVOT_CLIENTID}\"",
    "\tpivot_customer_id_start=\"${8:34}\"",
    "\tpivot_customer_id_length=\"${9:25}\"",
    "\tpivot_customer_id_trim=\"${10:y}\"",
    "\tpivot_reference_no=\"${11:%%or}\"",
    "\tpivot_document_date_start=\"${12:1}\"",
    "\tpivot_document_date_length=\"${13:8}\"",
    "\tpivot_document_date_trim=\"${14:y}\"",
    "\tpdfname=\"${15:%%pivot_pdf_name}\"",
    "\tfilename=\"${16:%%date%%n%%c%%batch%%._}\"",
    "\tfilenamestart=\"${17:34}\"",
    "\tfilenamelength=\"${18:25}\"",
    "\tfilesequence=\"${19:y}\"",
    "\tfiledate=\"${20:y}\"",
    "\tpagecountstart=\"${21:112}\"",
    "\tpagecountlength=\"${22:12}\"",
    "\tinitial_page_offset=\"${23:1}\"",
    "\tpivot_xmit_server=\"${24:cfs}\"",
    "\tdisable=\"${25:n}\"",
    ">",
    "\t<indexkey",
    "\t\tname=\"${26:addr1}\"",
    "\t\tstart=\"${27:413}\"",
    "\t\tlength=\"${28:50}\"",
    "\t\torder=\"${29:1}\"",
    "\t\ttrim=\"${30:y}\"",
    "\t\tdisable=\"${31:n}\"",
    "\t/>",
    "\t<indexkey",
    "\t\tname=\"${32:addr2}\"",
    "\t\tstart=\"${33:463}\"",
    "\t\tlength=\"${34:50}\"",
    "\t\torder=\"${35:2}\"",
    "\t\ttrim=\"${36:y}\"",
    "\t\tdisable=\"${37:n}\"",
    "\t/>",
    "</genindexer>",
    "$0"
  ],
  "description": "Example - Pivot Archive Corresponding GenIndexer Section\n\nGenerate files for Pivot"
},

"pivot_2": {
  "prefix": "pivot",
  "body": [
    "<!-- pivot_clientid value should come from pivot/internet team -->",
    "<assign",
    "\tname=\"${1:set_values_pivot_insert_archive}\"",
    "\tpivot_clientid=\"${2:POW2222}\"",
    "\tpivot_transid=\"${3:107}\"",
    "\tpivot_xmitcount=\"${4:001}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "<!-- xmtcfg setting should come from pivot/internet team. please check above for other options -->",
    "<module",
    "\tname=\"${6:pivot_insert_archive}\"",
    "\tmodname=\"${7:pivot}\"",
    "\tpivot_run=\"${8:all}\"",
    "\tpivot_type=\"${9:parchv2}\"",
    "\tpivot_ele=\"${10:pivot_insert_archive}\"",
    "\tpivot_idx_in=\"${11:\\$pre.repext\\$post}\"",
    "\tpivot_file_name=\"${12:\\${PIVOT_CLIENTID\\}_\\${MSITEC\\}_\\${LVLI\\}_\\${pivot_transid\\}_\\${date\\}_\\${PIVOT_XMITCOUNT\\}_archive_v2}\"",
    "\tpivot_idx_out=\"${13:\\${runpath\\}\\${pivot_file_name\\}_IDX_#SEQ#_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.idx}\"",
    "\tpivot_adt_out=\"${14:\\${runpath\\}\\${pivot_file_name\\}_IDX_#SEQ#_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.adt}\"",
    "\tpivot_pdf_name=\"${15:\\${pivot_file_name\\}_IDX_#SEQ#_PDF_#SEQ2#_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.pdf}\"",
    "\tpivot_inserts=\"${16:y}\"",
    "\tpivot_insert_list=\"${17:\\$pre.pivot_insert_list\\$post}\"",
    "\tpivot_chunk_index=\"${18:y}\"",
    "\tpivot_chunk_qty=\"${19:5000}\"",
    "\tpivot_xmit=\"${20:y}\"",
    "\txmtcfg=\"${21:internet}\"",
    "\tmerge_type=\"${22:parchv2}\"",
    "\tdisable=\"${23:n}\"",
    "/>",
    "$0"
  ],
  "description": "Pivot Archive for Inserts:\n\nGenerate files for Pivot"
},

"pivot_3": {
  "prefix": "pivot",
  "body": [
    "<genindexer",
    "\tname=\"${1:pivot_insert_archive}\"",
    "\tindex_type=\"${2:%%pivot_type}\"",
    "\tinext=\"${3:%%pivot_idx_in}\"",
    "\tinpivotinsrt=\"${4:%%pivot_insert_list}\"",
    "\toutpvtidx=\"${5:%%pivot_idx_out}\"",
    "\toutpvtadt=\"${6:%%pivot_adt_out}\"",
    "\tpivot_insert_index=\"${7:%%pivot_inserts}\"",
    "\tpivot_fixed_insert_position=\"${8:a}\"",
    "\tchunk_index=\"${9:%%pivot_chunk_index}\"",
    "\tpivot_client_app_id=\"${10:%%PIVOT_CLIENTID}\"",
    "\tpivot_customer_id_start=\"${11:34}\"",
    "\tpivot_customer_id_length=\"${12:25}\"",
    "\tpivot_customer_id_trim=\"${13:y}\"",
    "\tpivot_reference_no=\"${14:%%or}\"",
    "\tpivot_document_date_start=\"${15:1}\"",
    "\tpivot_document_date_length=\"${16:8}\"",
    "\tpivot_document_date_trim=\"${17:y}\"",
    "\tpdfname=\"${18:%%pivot_pdf_name}\"",
    "\tfilename=\"${19:%%date%%n%%c%%batch%%._}\"",
    "\tfilenamestart=\"${20:34}\"",
    "\tfilenamelength=\"${21:25}\"",
    "\tfilesequence=\"${22:y}\"",
    "\tfiledate=\"${23:y}\"",
    "\tpagecountstart=\"${24:112}\"",
    "\tpagecountlength=\"${25:12}\"",
    "\tinitial_page_offset=\"${26:1}\"",
    "\tpivot_xmit_server=\"${27:cfs}\"",
    "\tdisable=\"${28:n}\"",
    ">",
    "\t<indexkey",
    "\t\tname=\"${29:addr1}\"",
    "\t\tstart=\"${30:413}\"",
    "\t\tlength=\"${31:50}\"",
    "\t\torder=\"${32:1}\"",
    "\t\ttrim=\"${33:y}\"",
    "\t\tdisable=\"${34:n}\"",
    "\t/>",
    "\t<indexkey",
    "\t\tname=\"${35:addr2}\"",
    "\t\tstart=\"${36:463}\"",
    "\t\tlength=\"${37:50}\"",
    "\t\torder=\"${38:2}\"",
    "\t\ttrim=\"${39:y}\"",
    "\t\tdisable=\"${40:n}\"",
    "\t/>",
    "\t<indexkey",
    "\t\tname=\"${41:insrt_desc}\"",
    "\t\ttype=\"${42:insert_description}\"",
    "\t\torder=\"${43:3}\"",
    "\t\ttrim=\"${44:y}\"",
    "\t\tdisable=\"${45:n}\"",
    "\t/>",
    "\t<indexkey",
    "\t\tname=\"${46:insrt_ord}\"",
    "\t\ttype=\"${47:insert_order}\"",
    "\t\torder=\"${48:4}\"",
    "\t\ttrim=\"${49:y}\"",
    "\t\tdisable=\"${50:n}\"",
    "\t/>",
    "</genindexer>",
    "<!-- Also add the insert PDF file name (variable file_name) with full path (example bellow) in GenBatch INSERT -->",
    "<insert",
    "\tstock_code=\"${51:111111}\"",
    "\tthickness=\"${52:01.48}\"",
    "\tweight=\"${53:0.890}\"",
    "\t...",
    "\t...",
    "\t...",
    "\tname=\"${54:insert}\"",
    "\tfile_name=\"${55:%%usrparms%%.insert_111111_htryb_eng.pdf}\"",
    "\tdisable=\"${56:n}\"",
    "/>",
    "$0"
  ],
  "description": "Pivot Archive for Inserts Corresponding GenIndexer Section:\n\nGenerate files for Pivot"
},

"pivot_4": {
  "prefix": "pivot",
  "body": [
    "<!-- pivot_clientid value should come from pivot/internet team -->",
    "<assign",
    "\tname=\"${1:default_pivot_proof_settings}\"",
    "\tpivot_clientid=\"${2:pow1234}\"",
    "\tpivot_transid=\"${3:109}\"",
    "\tpivot_xmitcount=\"${4:#SEQ#}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "<!-- xmtcfg setting should come from pivot/internet team. please check above for other options -->",
    "<module",
    "\tname=\"${6:create_pivot_proof}\"",
    "\tmodname=\"${7:pivot}\"",
    "\tpivot_run=\"${8:all}\"",
    "\tpivot_type=\"${9:pprofv2}\"",
    "\tpivot_proof_from_crite=\"${10:y}\"",
    "\tpivot_crite_in=\"${11:\\$pre.\\${outmask\\}00}\"",
    "\tpivot_file_name=\"${12:\\${PIVOT_CLIENTID\\}_\\${MSITEC\\}_\\${LVLI\\}_\\${pivot_transid\\}_\\${date\\}_\\${pivot_xmitcount\\}}\"",
    "\tpivot_idx_out=\"${13:\\${runpath\\}\\${pivot_file_name\\}_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.txt}\"",
    "\tpivot_adt_out=\"${14:\\${runpath\\}\\${pivot_file_name\\}_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.adt}\"",
    "\tpivot_pdf_name=\"${15:\\${pivot_file_name\\}_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.pdf}\"",
    "\tpivot_proof_desc=\"${16:Proof for_\\${pi\\}\\${pjt\\}\\${n\\}\\${c\\}\\${batch\\}\\${run\\} - \\${date\\}}\"",
    "\tpivot_proof_type=\"${17:A}\"",
    "\tpivot_chunk_index=\"${18:y}\"",
    "\tpivot_chunk_qty=\"${19:5000}\"",
    "\tpivot_xmit=\"${20:y}\"",
    "\txmtcfg=\"${21:internet}\"",
    "\tmerge_type=\"${22:pprofv2}\"",
    "\tdisable=\"${23:n}\"",
    "/>",
    "$0"
  ],
  "description": "Example - Pivot Proof:\n\nGenerate files for Pivot"
},

"pivot_audit_0": {
  "prefix": "pivot_audit",
  "body": [
    "<!-- All defaulted version -->",
    "<module",
    "\tname=\"${1:pivot_audit_\\$batchid\\$c}\"",
    "\tmodname=\"${2:pivot_audit}\"",
    "\taudit_pdf=\"${3:\\${pre\\}.pivot.audit.proof.pdf}\"",
    "\tinput_file=\"${4:\\$infile}\"",
    "\tpivot_audit_id=\"${5:POW1234}\"",
    "\tpivot_site=\"${6:L}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "<!-- The _ variables are defaulted or optional you only need to include those if they are needed. Do not use an _ if you need to set one of those variables. -->",
    "<module",
    "\tname=\"${8:pivot_audit_\\$batchid\\$c}\"",
    "\tmodname=\"${9:pivot_audit}\"",
    "\taudit_pdf=\"${10:\\${pre\\}.pivot.audit.proof.pdf}\"",
    "\t_xmtcfg=\"${11:internetpci}\"",
    "\t_pivot_xmit=\"${12:y}\"",
    "\tinput_file=\"${13:\\$infile}\"",
    "\tpivot_audit_id=\"${14:POW1234}\"",
    "\tpivot_site=\"${15:L}\"",
    "\t_pivot_transid=\"${16:105}\"",
    "\t_pivot_audit_ver=\"${17:auditv2}\"",
    "\t_pdf_block_begin_page=\"${18:1}\"",
    "\t_pdf_block_end_page=\"${19:\\$audit_end_pages}\"",
    "\t_audit_file_name=\"${20:\\${client_code\\}\\${project_code\\}\\${n\\}\\${c\\}\\${batch\\}\\${run\\}}\"",
    "\t_document_date=\"${21:\\$date}\"",
    "\t_sub_segment=\"${22:000}\"",
    "\t_generic_field_1=\"${23: }\"",
    "\t_generic_field_2=\"${24: }\"",
    "\t_generic_field_3=\"${25: }\"",
    "\t_generic_field_4=\"${26: }\"",
    "\t_generic_field_5=\"${27: }\"",
    "\t_verification_field_1=\"${28: }\"",
    "\t_verification_field_2=\"${29: }\"",
    "\t_verification_field_3=\"${30: }\"",
    "\t_audit_order_number=\"${31:\\${n\\}}\"",
    "\t_audit_copy=\"${32:\\${c\\}}\"",
    "\t_audit_batch=\"${33:\\${batch\\}}\"",
    "\tdisable=\"${34:n}\"",
    "/>",
    "$0"
  ],
  "description": "pivot_audit example:\n\nThis module takes a pdf and index information and creates a pivot audit interaction. Sends a pivot audit file, logs an audit into the database for use in the rest of the pivot audit workflow."
},

"pivot_audit_handshake_0": {
  "prefix": "pivot_audit_handshake",
  "body": [
    "<module",
    "\tname=\"${1:pivot_audit_handshake\\$post}\"",
    "\tmodname=\"${2:pivot_audit_handshake}\"",
    "\tdisable=\"${3:n}\"",
    "/>",
    "$0"
  ],
  "description": "Module Example:\n\nValidates pivot audit handshakes. This uses a wait process and will wait the time specified in cfl_watmax and load_watmax for the respective handshakes. However it is a smart wait time. This means that it will actually check the database when the audit files were sent and then add the cfl or load time to the sent time and then only wait until that time is reached. This means if you run this process more then the watmax times after the audit file is sent, it will only check one time for the handshakes as the time has already expired. This way you can continue to process after you send an audit and not add an additional watmax time to the end of your run."
},

"pivot_audit_handshake_1": {
  "prefix": "pivot_audit_handshake",
  "body": [
    "<!-- Using the \\$pivot_audit_hs_hash variable -->",
    "<command",
    "\tname=\"${1:do_stuff_with_hs_status_\\$post}\"",
    "\tdisable=\"${2:n}\"",
    ">",
    "\t<![CDATA[\n\t\tprint \"\\\\n-----\\\\n\";\n\t\tforeach my \\$hs_file (keys %\\$pivot_audit_hs_hash)\n\t\t{\n\t\t\tprint \"\\$hs_file status: \" . \\$pivot_audit_hs_hash->{\\$hs_file\\} . \"\\\\n\";\n\t\t\tif(\\$pivot_audit_hs_hash->{\\$hs_file\\} ne \"loaded\" and \\$pivot_audit_hs_hash->{\\$hs_file\\} ne \"recieved\")\n\t\t\t{\n\t\t\t\tdie(\"Handshakes Failed to validate: \\$hs_file\");\n\t\t\t\\}\n\t\t\\}\n\t\tprint \"\\\\n-----\\\\n\";\n\t\tprint(\"All handshakes valid! We all good.\");\n\t]]>",
    "</command>",
    "$0"
  ],
  "description": "Post Module Example:\n\nValidates pivot audit handshakes. This uses a wait process and will wait the time specified in cfl_watmax and load_watmax for the respective handshakes. However it is a smart wait time. This means that it will actually check the database when the audit files were sent and then add the cfl or load time to the sent time and then only wait until that time is reached. This means if you run this process more then the watmax times after the audit file is sent, it will only check one time for the handshakes as the time has already expired. This way you can continue to process after you send an audit and not add an additional watmax time to the end of your run."
},

"pivot_audit_status_0": {
  "prefix": "pivot_audit_status",
  "body": [
    "<module",
    "\tname=\"${1:pivot_audit_status\\$post}\"",
    "\tmodname=\"${2:pivot_audit_status}\"",
    "\tstatus_file=\"${3:\\${status_file\\}}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "Module Example:\n\nTakes a pivot audit status file and logs the status to the database and returns status information to appdriver application."
},

"pivot_audit_status_1": {
  "prefix": "pivot_audit_status",
  "body": [
    "<if",
    "\tname=\"${1:if_audit_app_can_dis_\\${post\\}}\"",
    ">",
    "\t<!-- Approved move file to approved or send to print -->",
    "\t<condition",
    "\t\tname=\"${2:condition_for_action_value_a\\${post\\}}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$ref_audit_status->{action_value\\} eq \"A\") ]]>",
    "\t\t<command",
    "\t\t\tname=\"${3:move_to_pending_print_example}\"",
    "\t\t\tdisable=\"${4:n}\"",
    "\t\t>",
    "\t\t\t<![CDATA[\n\t\t\tprint \"\\\\n-----\\\\n\";\n\t\t\tprint \"audit status: \" . \\$ref_audit_status->{action_value\\} . \"\\\\n\";\n\t\t\tprint \"cp \". \\$ref_audit_status->{input_file\\} . \" to approved dir\\\\n\";\n\t\t\tprint \"\\$audit_file_status\\\\n\";\n\t\t\tprint \"-----\\\\n\";\n\t\t]]>",
    "\t\t</command>",
    "\t\t<subprocess",
    "\t\t\tname=\"${5:audit_approved_process\\$post}\"",
    "\t\t\tprocessname=\"${6:audit_approved_process}\"",
    "\t\t\tdisable=\"${7:n}\"",
    "\t\t/>",
    "\t</condition>",
    "\t<!-- cancelled delete file -->",
    "\t<condition",
    "\t\tname=\"${8:condition_for_action_value_c\\${post\\}}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$ref_audit_status->{action_value\\} eq \"C\") ]]>",
    "\t\t<module",
    "\t\t\tstepname=\"${9:gendel01}\"",
    "\t\t\tmodname=\"${10:gendel01}\"",
    "\t\t\tdelinp=\"${11:\\$ref_audit_status->{input_file\\}}\"",
    "\t\t\tdisable=\"${12:n}\"",
    "\t\t/>",
    "\t</condition>",
    "\t<!-- disapproved do something your parents would not be proud of -->",
    "\t<condition",
    "\t\tname=\"${13:condition_for_action_value_d\\${post\\}}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$ref_audit_status->{action_value\\} eq \"D\") ]]>",
    "\t\t<subprocess",
    "\t\t\tname=\"${14:audit_disapproved_process\\$post}\"",
    "\t\t\tprocessname=\"${15:audit_disapproved_process}\"",
    "\t\t\tdisable=\"${16:n}\"",
    "\t\t/>",
    "\t</condition>",
    "\t<!-- Somthing other then expected die horribly -->",
    "\t<else>",
    "\t\t<module",
    "\t\t\tname=\"${17:et_tu_pivot}\"",
    "\t\t\tmodname=\"${18:gendie01}\"",
    "\t\t\tdierc=\"${19:117}\"",
    "\t\t\tdiemsg=\"${20:The Darkness consumes you!}\"",
    "\t\t\tdisable=\"${21:n}\"",
    "\t\t/>",
    "\t</else>",
    "</if>",
    "$0"
  ],
  "description": "$ref_audit_status Example:\n\nTakes a pivot audit status file and logs the status to the database and returns status information to appdriver application."
},

"pivot_audit_requestor_0": {
  "prefix": "pivot_audit_requestor",
  "body": [
    "<module",
    "\tname=\"${1:pivot_audit_\\$post}\"",
    "\tmodname=\"${2:pivot_audit_requestor}\"",
    "\tpivot_audit_id=\"${3:POW1234}\"",
    "\tpivot_site=\"${4:L}\"",
    "\tpivot_xmit=\"${5:y}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "Module Example:\n\nSends a request_status file to pivot. Waits for the return tot file and then processes the tot. Logs a tot to the database and links all audits in the tot to that tot database entry. Returns a data structure that can be parsed, and also creates 3 list files, approved/disapproved/cancelled. These files have the input files of the audits with the corresponding status, one file per line. These files can be used in a powerstream loop to perform what ever action needs to be done. Creates an error report that needs to be emailed to programmer and pm to make sure there were no errors with any files that are being audited"
},

"pivot_audit_requestor_1": {
  "prefix": "pivot_audit_requestor",
  "body": [
    "<if",
    "\tname=\"${1:if_reqeustor_errors}\"",
    ">",
    "\t<!-- Check for severe errors. -->",
    "\t<condition",
    "\t\tname=\"${2:pivot_audit_severe_error}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$ref_tot_audits->{error\\}->{level\\} eq \"severe\") ]]>",
    "\t\t<!-- If found send email with report and die -->",
    "\t\t<module",
    "\t\t\tname=\"${3:email_pivot_audit_report_severe_error\\$post}\"",
    "\t\t\tmodname=\"${4:geneml01}\"",
    "\t\t\temlbatt=\"${5:\\${pre\\}.audit_report.txt}\"",
    "\t\t\temlatt=\"${6:\\${pre\\}.audit_report.txt}\"",
    "\t\t\temlbody=\"${7: }\"",
    "\t\t\temlfr=\"${8:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlsub=\"${9:Pivot Audit Requestor Severe Error!}\"",
    "\t\t\temlto=\"${10:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temltto=\"${11:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\tdisable=\"${12:n}\"",
    "\t\t/>",
    "\t\t<!-- You could die here or just send the email. Either way -->",
    "\t\t<!-- you need to investigate the file(s) in the report. -->",
    "\t\t<module",
    "\t\t\tname=\"${13:Death_by_Owner}\"",
    "\t\t\tmodname=\"${14:gendie01}\"",
    "\t\t\tdierc=\"${15:117}\"",
    "\t\t\tdiemsg=\"${16:Master Chief Error: Never leave a file behind!}\"",
    "\t\t\tdisable=\"${17:n}\"",
    "\t\t/>",
    "\t</condition>",
    "\t<!-- Check for potential erros -->",
    "\t<condition",
    "\t\tname=\"${18:pivot_audit_potential_error}\"",
    "\t>",
    "\t\t<![CDATA[ (\\$ref_tot_audits->{error\\}->{level\\} eq \"potential\") ]]>",
    "\t\t<!-- If found send email with report and continue on. -->",
    "\t\t<module",
    "\t\t\tname=\"${19:email_pivot_audit_report_potential_error\\$post}\"",
    "\t\t\tmodname=\"${20:geneml01}\"",
    "\t\t\temlbatt=\"${21:\\${pre\\}.audit_report.txt}\"",
    "\t\t\temlatt=\"${22:\\${pre\\}.audit_report.txt}\"",
    "\t\t\temlbody=\"${23: }\"",
    "\t\t\temlfr=\"${24:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlsub=\"${25:Pivot Audit Requestor Potential Errors!}\"",
    "\t\t\temlto=\"${26:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temltto=\"${27:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\tdisable=\"${28:n}\"",
    "\t\t/>",
    "\t</condition>",
    "\t<!-- Send report no errors detected -->",
    "\t<else>",
    "\t\t<module",
    "\t\t\tname=\"${29:email_pivot_audit_report_potential_error\\$post}\"",
    "\t\t\tmodname=\"${30:geneml01}\"",
    "\t\t\temlbatt=\"${31:\\${pre\\}.audit_report.txt}\"",
    "\t\t\temlatt=\"${32:\\${pre\\}.audit_report.txt}\"",
    "\t\t\temlbody=\"${33: }\"",
    "\t\t\temlfr=\"${34:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temlsub=\"${35:Pivot Audit Requestor Report}\"",
    "\t\t\temlto=\"${36:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\temltto=\"${37:brett.r.ward\\\\\\\\\\\\@rrd.com}\"",
    "\t\t\tdisable=\"${38:n}\"",
    "\t\t/>",
    "\t</else>",
    "</if>",
    "$0"
  ],
  "description": "Post Module Error Handling Example:\n\nSends a request_status file to pivot. Waits for the return tot file and then processes the tot. Logs a tot to the database and links all audits in the tot to that tot database entry. Returns a data structure that can be parsed, and also creates 3 list files, approved/disapproved/cancelled. These files have the input files of the audits with the corresponding status, one file per line. These files can be used in a powerstream loop to perform what ever action needs to be done. Creates an error report that needs to be emailed to programmer and pm to make sure there were no errors with any files that are being audited"
},

"pivot_audit_requestor_2": {
  "prefix": "pivot_audit_requestor",
  "body": [
    "<!-- Approved file loop. -->",
    "<loop",
    "\tname=\"${1:approved_input_loop}\"",
    "\tloop_data_file=\"${2:\\$pre.audit_list.approved}\"",
    ">",
    "\t<!-- Move approved file to approved input dir. -->",
    "\t<module",
    "\t\tstepname=\"${3:genmov01}\"",
    "\t\tmodname=\"${4:genmov01}\"",
    "\t\tmovinp=\"${5:\\${loop_curline\\}}\"",
    "\t\tmovout=\"${6:\\${usrinputs\\}approved/}\"",
    "\t/>",
    "</loop>",
    "$0"
  ],
  "description": "List Files Example:\n\nSends a request_status file to pivot. Waits for the return tot file and then processes the tot. Logs a tot to the database and links all audits in the tot to that tot database entry. Returns a data structure that can be parsed, and also creates 3 list files, approved/disapproved/cancelled. These files have the input files of the audits with the corresponding status, one file per line. These files can be used in a powerstream loop to perform what ever action needs to be done. Creates an error report that needs to be emailed to programmer and pm to make sure there were no errors with any files that are being audited"
},

"pivot_audit_finalize_0": {
  "prefix": "pivot_audit_finalize",
  "body": [
    "<module",
    "\tname=\"${1:pivot_audit_finalize\\$post}\"",
    "\tmodname=\"${2:pivot_audit_finalize}\"",
    "\tdisable=\"${3:n}\"",
    "/>",
    "$0"
  ],
  "description": "pivot_audit_finalize example:\n\nUpdates approved audits contained in the tot file that was processed and updates the audit status to complete. This should be called at the end of your job, right before your archive to signal to the database that the approved audits contained in the tot file have all run successfully."
},

"pivot_email_0": {
  "prefix": "pivot_email",
  "body": [
    "<module",
    "\tname=\"${1:pivot_xmit_emails}\"",
    "\tmodname=\"${2:pivot_email}\"",
    "\tpivot_idx_in=\"${3:c\\${c\\}_h9d00301_batout.txt}\"",
    "\tpivot_file_name=\"${4:\\${PIVOT_CLIENTID\\}_\\${MSITEC\\}_\\${LVLI3\\}_\\${pivot_transid\\}_\\${date\\}_\\${PIVOT_XMITCOUNT\\}}\"",
    "\tpivot_idx_out=\"${5:\\${runpath\\}\\${pivot_file_name\\}_email_v1_\\${n\\}\\${c\\}.idx}\"",
    "\tpivot_adt_out=\"${6:\\${runpath\\}\\${pivot_file_name\\}_email_v1_\\${n\\}\\${c\\}.adt}\"",
    "\tpivot_batch_out=\"${7:\\${runpath\\}\\${pivot_file_name\\}_email_v1_\\${n\\}\\${c\\}.batch}\"",
    "\txmtcfg=\"${8:internetpci}\"",
    "\tpivot_input_format=\"${9:f}\"",
    "\tpivot_input_fields=\"${10:consumer_id,2218,12,reference_number,2255,7,email_address,2263,100}\"",
    "\tpivot_email_type=\"${11:cncinvoicenotification}\"",
    "\tpivot_xmit=\"${12:y}\"",
    "\tpivot_hold_days=\"${13:2}\"",
    "\tdisable=\"${14:n}\"",
    "/>",
    "$0"
  ],
  "description": "In this example, we are feeding a flat file into the module. We are specifying three fields: consumer_id, reference_number, and email_address The emails will not actually be sent in TEST, but they will be sent in Prod. The Internet team will hold the emails for two days before sending.\n\nCreate inputs for PIVOT emBuilder and emSender to generate emails."
},

"pivot_email_1": {
  "prefix": "pivot_email",
  "body": [
    "<module",
    "\tname=\"${1:pivot_email}\"",
    "\tmodname=\"${2:pivot_email}\"",
    "\tpivot_run=\"${3:all}\"",
    "\tpivot_type=\"${4:PARCHV2}\"",
    "\tpivot_ele=\"${5:pivot_archive}\"",
    "\tpivot_idx_in=\"${6:\\$pre.repext\\$post}\"",
    "\tpivot_file_name=\"${7:\\${PIVOT_CLIENTID\\}_\\${LVLI2\\}_\\${MSITEC\\}\\${msitec2\\}_\\${pivot_transid\\}_\\${date\\}_\\${PIVOT_XMITCOUNT\\}_email_v1}\"",
    "\tpivot_idx_out=\"${8:\\${runpath\\}\\${pivot_file_name\\}_IDX_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.idx}\"",
    "\tpivot_adt_out=\"${9:\\${runpath\\}\\${pivot_file_name\\}_IDX_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.adt}\"",
    "\tpivot_batch_out=\"${10:\\${runpath\\}\\${pivot_file_name\\}_email_v1_\\${n\\}\\${c\\}\\${run\\}.batch}\"",
    "\tpivot_attach_pdfs=\"${11:y}\"",
    "\tpivot_att_out=\"${12:\\${runpath\\}\\${pivot_file_name\\}_IDX_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.att}\"",
    "\tpivot_pdf_name=\"${13:\\${pivot_file_name\\}_IDX_001_PDF_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.pdf}\"",
    "\tpivot_pdf_password=\"${14: }\"",
    "\tpivot_chunk_index=\"${15:y}\"",
    "\tpivot_chunk_qty=\"${16:5000}\"",
    "\tpivot_idx_val=\"${17:y}\"",
    "\tpivot_email_type=\"${18:Document Notification}\"",
    "\tpivot_send_emails=\"${19:y}\"",
    "\tpivot_xmit=\"${20:y}\"",
    "\tpivot_input_format=\"${21:f}\"",
    "\tpivot_hold_date=\"${22:11/20/2015}\"",
    "\tpivot_input_fields=\"${23:email_address,2221,100,pdf_name,1846,80,pdf_begin_page,72,12,pdf_page_length,111,12,salutation_info,2461,19,Account_info,34,11,consumer_id,412,50,Customer,612,50,Consumer_info,612,50,subject,2480,37,cc,2517,24}\"",
    "\txmtcfg=\"${24:internetpci}\"",
    "\tpivot_xml_template=\"${25:\\${usrparms\\}eml_xml.xml}\"",
    "\tdisable=\"${26:n}\"",
    "/>",
    "$0"
  ],
  "description": "In this example, we show how to attach pdfs that were generated through printdriver\n\nCreate inputs for PIVOT emBuilder and emSender to generate emails."
},

"pivot_report_viewer_0": {
  "prefix": "pivot_report_viewer",
  "body": [
    "<assign",
    "\tname=\"${1:set_values_pivot_report_viewer}\"",
    "\tpivot_rv_clientid=\"${2:POW1111}\"",
    "\tpivot_rv_transid=\"${3:106}\"",
    "\tpivot_rv_xmitcount=\"${4:001}\"",
    "\tpivot_rv_jobcode=\"${5:POW1111A}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "<module",
    "\tname=\"${7:pivot_report_viewer}\"",
    "\tmodname=\"${8:pivot_report_viewer}\"",
    "\tpivot_rv_type=\"${9:pdf}\"",
    "\tpivot_rv_filename=\"${10:\\${PIVOT_RV_CLIENTID\\}_\\${MSITEC\\}_\\${LVLI\\}_\\${pivot_rv_transid\\}_\\${date\\}_\\${PIVOT_RV_XMITCOUNT\\}_reportv2}\"",
    "\tpivot_rv_idx_out=\"${11:\\${runpath\\}\\${pivot_rv_filename\\}_IDX_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.idx}\"",
    "\tpivot_rv_adt_out=\"${12:\\${runpath\\}\\${pivot_rv_filename\\}_IDX_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.adt}\"",
    "\tpivot_rv_file_out=\"${13:\\${runpath\\}\\${pivot_rv_filename\\}_IDX_001_\\${n\\}\\${c\\}\\${batch\\}\\${run\\}.pdf}\"",
    "\tpivot_rv_reportname=\"${14:THIS IS A TEST REPORT}\"",
    "\tpivot_rv_rec_qty=\"${15:1}\"",
    "\tpivot_rv_img_qty=\"${16:2}\"",
    "\tpivot_rv_xmit=\"${17:n}\"",
    "\txmtcfg=\"${18:internet}\"",
    "\tdisable=\"${19:n}\"",
    "/>",
    "$0"
  ],
  "description": "pivot_report_viewer example:\n\nCreates index and adt file for sending files to the pivot report viewer."
},

"send_dashboard_0": {
  "prefix": "send_dashboard",
  "body": [
    "<module",
    "\tname=\"${1:send_dashboard}\"",
    "\tmodname=\"${2:send_dashboard}\"",
    "\tdisable=\"${3:n}\"",
    "/>",
    "$0"
  ],
  "description": "Simple example of sending current dashboard file.\n\nSend dashboard files to web-based dashboard client. The dashboard file is created during the run and contains information about all transmissions that occur during the run. If dashboard_on is turned on, in your defaults, then appdriver will automatically send the start and final dashboard file. This module is intended to give the programmer the ability to send the current dashboard file at any point in the run. The dashboard files are simple xml files."
},

"send_commingle_report_0": {
  "prefix": "send_commingle_report",
  "body": [
    "<module",
    "\tname=\"${1:send_commingle_report}\"",
    "\tmodname=\"${2:send_commingle_report}\"",
    "\tcomingle_input=\"${3:\\$pre.repext\\$post}\"",
    "\ttransmit=\"${4:y}\"",
    "\tdisable=\"${5:n}\"",
    "/>",
    "$0"
  ],
  "description": "Simple example of creating and sending a commingle report.\n\nCollects commingle information from the repext file, builds a formatted file and sends to a determined location. Should be placed after the merge."
},

"viva_send01_0": {
  "prefix": "viva_send01",
  "body": [
    "<module",
    "\tname=\"${1:viva_send}\"",
    "\tmodname=\"${2:viva_send01}\"",
    "\tviva_barcode=\"${3:2d}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "viva_send01 example:\n\nSends Viva files via ftp"
},

"viva_send02_0": {
  "prefix": "viva_send02",
  "body": [
    "<module",
    "\tname=\"${1:viva_send}\"",
    "\tmodname=\"${2:viva_send02}\"",
    "\tviva_barcode=\"${3:2d}\"",
    "\tdisable=\"${4:n}\"",
    "/>",
    "$0"
  ],
  "description": "viva_send02 example:\n\nSends Viva files via connect direct."
},

"wait_list01_0": {
  "prefix": "wait_list01",
  "body": [
    "<module",
    "\tname=\"${1:wait}\"",
    "\tmodname=\"${2:wait_list01}\"",
    "\twatdir=\"${3:\\$runpath}\"",
    "\twatfil=\"${4:\\$filename}\"",
    "\twatlist=\"${5:n}\"",
    "\tonerror_maxtimerexpired=\"${6:no_files_received_process}\"",
    "\tdisable=\"${7:n}\"",
    "/>",
    "$0"
  ],
  "description": "wait_list01 example:\n\nWaits for a file that meets a user-defined file in a user-defined directory before continuing with the script processing. This is useful for waiting for offline processes to complete."
},

"wait_wild01_0": {
  "prefix": "wait_wild01",
  "body": [
    "<module",
    "\tname=\"${1:wait}\"",
    "\tmodname=\"${2:wait_wild01}\"",
    "\twatdir=\"${3:\\$runpath}\"",
    "\twatfil=\"${4:CLIENT_INPUT*}\"",
    "\tonerror_maxtimerexpired=\"${5:no_files_received_process}\"",
    "\tdisable=\"${6:n}\"",
    "/>",
    "$0"
  ],
  "description": "wait_wild01 example:\n\nWaits for a file that is defined by using wildcards in the namein a user-defined directory before continuing with the script processing. This is useful for waiting for offline processes to complete."
},

"cdata_0": {
  "prefix": "cdata",
  "body": [
    "<![CDATA[ $0 ]]>"
  ],
  "description": "CDATA example\n\nInline perl"
},
"blizzard": {
  "prefix": "blizzard",
  "body": [
    "<module",
    "  name=\"${1:blizzard_normalize}\"",
    "  modname=\"blizzard\"",
    "  toolset_path=\"${2:pdpdptxx}\"",
    "  function=\"many_to_many\"",
    "  pdffiles=\"${3:\\$\\{runpath\\}pdfdir/}\"",
    "  output_dir=\"${4:\\$\\{runpath\\}pdfdir/normalized/}\"",
    "  config=\"${4:\\$\\{usrparms\\}\\$blizzardConfig}\"",
    "  chunk_size=\"${5:500}\"",
    "  watmax=\"${6:7000}\"",
    "  max_processes=\"${7:4}\"",
    "  disable=\"n\"",
    "/>",
    ""
  ],
  "description": "blizzard"
},
"ghostscript embed optimize": {
  "prefix": "ghoste",
  "body": [
    "<system",
    "  command=\"\\$gsvers -dSAFER -dNOPAUSE -dBATCH -dPDFSETTINGS=/prepress -sDEVICE=pdfwrite -sOutputFile=\\$\\{runpath\\}\\${loop_curfile}.pdf \\$loop_dir_curfile\"",
    "  disable=\"n\"",
    "/>"
  ],
  "description": "ghostscript embed optimize"
}
}
